
servo_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800551c  0800551c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005524  08005524  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000200  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e212  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203a  00000000  00000000  0002e2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  000302f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d63  00000000  00000000  00031e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107e3  00000000  00000000  00054bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd83d  00000000  00000000  000653b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00132bf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043b8  00000000  00000000  00132c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052c0 	.word	0x080052c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080052c0 	.word	0x080052c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <RFID_Init>:
extern PN532 pn532;
extern int debounce;
uint8_t valid_uid[] = {0x93, 0x10, 0xEB, 0x6};

int RFID_Init(PN532* pn532, uint8_t* version)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	PN532_I2C_Init(pn532);
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 fedc 	bl	800133c <PN532_I2C_Init>
	PN532_GetFirmwareVersion(pn532, version);
 8000584:	6839      	ldr	r1, [r7, #0]
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 fd5e 	bl	8001048 <PN532_GetFirmwareVersion>
	if (PN532_GetFirmwareVersion(pn532, version) != PN532_STATUS_OK) {
 800058c:	6839      	ldr	r1, [r7, #0]
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f000 fd5a 	bl	8001048 <PN532_GetFirmwareVersion>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d002      	beq.n	80005a0 <RFID_Init+0x2c>
		return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e003      	b.n	80005a8 <RFID_Init+0x34>
	}

	PN532_SamConfiguration(pn532);
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f000 fd75 	bl	8001090 <PN532_SamConfiguration>

	return 1;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <read_uid>:


bool read_uid(uint8_t* response)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	uint8_t len;
	int i;
	int counter = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
	len = PN532_ReadPassiveTarget(&pn532, response, PN532_MIFARE_ISO14443A, 1000);
 80005bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c0:	2200      	movs	r2, #0
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <read_uid+0x64>)
 80005c6:	f000 fd85 	bl	80010d4 <PN532_ReadPassiveTarget>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73fb      	strb	r3, [r7, #15]

	if(len > 0){
 80005ce:	7bfb      	ldrb	r3, [r7, #15]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d015      	beq.n	8000600 <read_uid+0x50>
		for(i = 0; i < 4; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	e00f      	b.n	80005fa <read_uid+0x4a>
			if(valid_uid[i] == response[i])
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <read_uid+0x68>)
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	4413      	add	r3, r2
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	6879      	ldr	r1, [r7, #4]
 80005e6:	440b      	add	r3, r1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d102      	bne.n	80005f4 <read_uid+0x44>
			{
				counter++;
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	3301      	adds	r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
		for(i = 0; i < 4; i++)
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3301      	adds	r3, #1
 80005f8:	617b      	str	r3, [r7, #20]
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	ddec      	ble.n	80005da <read_uid+0x2a>
			}
	}

	if(counter == 4) return true;
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	2b04      	cmp	r3, #4
 8000604:	d101      	bne.n	800060a <read_uid+0x5a>
 8000606:	2301      	movs	r3, #1
 8000608:	e000      	b.n	800060c <read_uid+0x5c>
	else return false;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	3718      	adds	r7, #24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000130 	.word	0x20000130
 8000618:	20000000 	.word	0x20000000

0800061c <validation_check>:


uint8_t validation_check(uint8_t *interrupt_checker, uint8_t* response)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
	uint8_t card_query;
	uint8_t status = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]

	static long int read_counter = 0;
	if(*interrupt_checker == READER_INTERRUPTED)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d13e      	bne.n	80006b0 <validation_check+0x94>
	{
		card_query = read_uid(response);
 8000632:	6838      	ldr	r0, [r7, #0]
 8000634:	f7ff ffbc 	bl	80005b0 <read_uid>
 8000638:	4603      	mov	r3, r0
 800063a:	73bb      	strb	r3, [r7, #14]
		read_counter++;
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <validation_check+0xac>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <validation_check+0xac>)
 8000644:	6013      	str	r3, [r2, #0]

		if(card_query == true && read_counter % 2 == 0)
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d111      	bne.n	8000670 <validation_check+0x54>
 800064c:	4b1e      	ldr	r3, [pc, #120]	; (80006c8 <validation_check+0xac>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10b      	bne.n	8000670 <validation_check+0x54>
		{
			//LOCKED
			status = LOCKED;
 8000658:	2305      	movs	r3, #5
 800065a:	73fb      	strb	r3, [r7, #15]
			htim3.Instance->CCR1 = 75; // angle/position of the servo
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <validation_check+0xb0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	224b      	movs	r2, #75	; 0x4b
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
			memset(response, 0, 10 * sizeof(uint8_t));
 8000664:	220a      	movs	r2, #10
 8000666:	2100      	movs	r1, #0
 8000668:	6838      	ldr	r0, [r7, #0]
 800066a:	f003 fe93 	bl	8004394 <memset>
 800066e:	e01c      	b.n	80006aa <validation_check+0x8e>

		}
		else if(card_query == true && read_counter % 2 == 1)
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d114      	bne.n	80006a0 <validation_check+0x84>
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <validation_check+0xac>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	bfb8      	it	lt
 8000682:	425b      	neglt	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d10b      	bne.n	80006a0 <validation_check+0x84>
		{
			//UNLOCKED
			status = UNLOCKED;
 8000688:	2306      	movs	r3, #6
 800068a:	73fb      	strb	r3, [r7, #15]
			htim3.Instance->CCR1 = 25; // angle/position of the servo
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <validation_check+0xb0>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2219      	movs	r2, #25
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
			memset(response, 0, 10 * sizeof(uint8_t));
 8000694:	220a      	movs	r2, #10
 8000696:	2100      	movs	r1, #0
 8000698:	6838      	ldr	r0, [r7, #0]
 800069a:	f003 fe7b 	bl	8004394 <memset>
 800069e:	e004      	b.n	80006aa <validation_check+0x8e>
		}
		else if(card_query == false)
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <validation_check+0x8e>
		{
			status = REJECTED;
 80006a6:	2307      	movs	r3, #7
 80006a8:	73fb      	strb	r3, [r7, #15]
		}
		*interrupt_checker = READER_INTERRUPT_CLEARED;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f001 f8ba 	bl	800182c <HAL_Delay>
	debounce = 0;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <validation_check+0xb4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]

	return status;
 80006be:	7bfb      	ldrb	r3, [r7, #15]

}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000090 	.word	0x20000090
 80006cc:	200000e8 	.word	0x200000e8
 80006d0:	2000025a 	.word	0x2000025a

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d8:	f001 f836 	bl	8001748 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006dc:	f000 f828 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 f936 	bl	8000950 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006e4:	f000 f88e 	bl	8000804 <MX_I2C1_Init>
  MX_TIM3_Init();
 80006e8:	f000 f8ba 	bl	8000860 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ec:	2100      	movs	r1, #0
 80006ee:	4809      	ldr	r0, [pc, #36]	; (8000714 <main+0x40>)
 80006f0:	f003 f848 	bl	8003784 <HAL_TIM_PWM_Start>

  check = RFID_Init(&pn532, version_buffer);
 80006f4:	4908      	ldr	r1, [pc, #32]	; (8000718 <main+0x44>)
 80006f6:	4809      	ldr	r0, [pc, #36]	; (800071c <main+0x48>)
 80006f8:	f7ff ff3c 	bl	8000574 <RFID_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a08      	ldr	r2, [pc, #32]	; (8000720 <main+0x4c>)
 8000700:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  status_success_query = validation_check(&interrupt_checker, uid_buffer);
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <main+0x50>)
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <main+0x54>)
 8000706:	f7ff ff89 	bl	800061c <validation_check>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b07      	ldr	r3, [pc, #28]	; (800072c <main+0x58>)
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e7f6      	b.n	8000702 <main+0x2e>
 8000714:	200000e8 	.word	0x200000e8
 8000718:	20000148 	.word	0x20000148
 800071c:	20000130 	.word	0x20000130
 8000720:	20000254 	.word	0x20000254
 8000724:	20000248 	.word	0x20000248
 8000728:	20000258 	.word	0x20000258
 800072c:	20000259 	.word	0x20000259

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fe28 	bl	8004394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a0:	2308      	movs	r3, #8
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ae:	2307      	movs	r3, #7
 80007b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	4618      	mov	r0, r3
 80007b8:	f002 fab8 	bl	8002d2c <HAL_RCC_OscConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007c2:	f000 f945 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c6:	230f      	movs	r3, #15
 80007c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2105      	movs	r1, #5
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fd19 	bl	800321c <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007f0:	f000 f92e 	bl	8000a50 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3750      	adds	r7, #80	; 0x50
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_I2C1_Init+0x50>)
 800080a:	4a13      	ldr	r2, [pc, #76]	; (8000858 <MX_I2C1_Init+0x54>)
 800080c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_I2C1_Init+0x50>)
 8000810:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_I2C1_Init+0x58>)
 8000812:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_I2C1_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_I2C1_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_I2C1_Init+0x50>)
 8000822:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000826:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_I2C1_Init+0x50>)
 8000842:	f001 fadd 	bl	8001e00 <HAL_I2C_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800084c:	f000 f900 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000094 	.word	0x20000094
 8000858:	40005400 	.word	0x40005400
 800085c:	000186a0 	.word	0x000186a0

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <MX_TIM3_Init+0xe8>)
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <MX_TIM3_Init+0xec>)
 8000894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680 - 1;
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_TIM3_Init+0xe8>)
 8000898:	f240 628f 	movw	r2, #1679	; 0x68f
 800089c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80008a4:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008ba:	f002 febb 	bl	8003634 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80008c4:	f000 f8c4 	bl	8000a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008d2:	4619      	mov	r1, r3
 80008d4:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008d6:	f003 f8df 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80008e0:	f000 f8b6 	bl	8000a50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008e4:	4818      	ldr	r0, [pc, #96]	; (8000948 <MX_TIM3_Init+0xe8>)
 80008e6:	f002 fef4 	bl	80036d2 <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008f0:	f000 f8ae 	bl	8000a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	4811      	ldr	r0, [pc, #68]	; (8000948 <MX_TIM3_Init+0xe8>)
 8000904:	f003 fca0 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800090e:	f000 f89f 	bl	8000a50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	; 0x60
 8000914:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	4619      	mov	r1, r3
 8000928:	4807      	ldr	r0, [pc, #28]	; (8000948 <MX_TIM3_Init+0xe8>)
 800092a:	f002 fff3 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000934:	f000 f88c 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <MX_TIM3_Init+0xe8>)
 800093a:	f000 fdbb 	bl	80014b4 <HAL_TIM_MspPostInit>

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	; 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000e8 	.word	0x200000e8
 800094c:	40000400 	.word	0x40000400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_GPIO_Init+0xb8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <MX_GPIO_Init+0xb8>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <MX_GPIO_Init+0xb8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_GPIO_Init+0xb8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <MX_GPIO_Init+0xb8>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_GPIO_Init+0xb8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_GPIO_Init+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Reader_Interrupt_Pin */
  GPIO_InitStruct.Pin = Reader_Interrupt_Pin;
 80009d6:	2302      	movs	r3, #2
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reader_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_GPIO_Init+0xbc>)
 80009ec:	f001 f854 	bl	8001a98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2007      	movs	r0, #7
 80009f6:	f001 f818 	bl	8001a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f001 f831 	bl	8001a62 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	; 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000

08000a10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Reader_Interrupt_Pin && debounce == 0)
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10c      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x2a>
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d108      	bne.n	8000a3a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		debounce++;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b05      	ldr	r3, [pc, #20]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a32:	701a      	strb	r2, [r3, #0]
		interrupt_checker = READER_INTERRUPTED;
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2000025a 	.word	0x2000025a
 8000a4c:	20000258 	.word	0x20000258

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <Error_Handler+0x8>

08000a5a <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b0c8      	sub	sp, #288	; 0x120
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000a68:	6018      	str	r0, [r3, #0]
 8000a6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a72:	6019      	str	r1, [r3, #0]
 8000a74:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a78:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a7c:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000a7e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a82:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d806      	bhi.n	8000a9a <PN532_WriteFrame+0x40>
 8000a8c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000a90:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000a94:	881b      	ldrh	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <PN532_WriteFrame+0x46>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e0aa      	b.n	8000bf6 <PN532_WriteFrame+0x19c>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000aa6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000aaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000ab2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000aba:	2200      	movs	r2, #0
 8000abc:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000abe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ac2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ac6:	22ff      	movs	r2, #255	; 0xff
 8000ac8:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000aca:	2300      	movs	r3, #0
 8000acc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000ad0:	e010      	b.n	8000af4 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8000ad2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000ad6:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ada:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ade:	5cd2      	ldrb	r2, [r2, r3]
 8000ae0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000ae4:	4413      	add	r3, r2
 8000ae6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000aea:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000aee:	3301      	adds	r3, #1
 8000af0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000af4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000af8:	2b02      	cmp	r3, #2
 8000afa:	d9ea      	bls.n	8000ad2 <PN532_WriteFrame+0x78>
    }
    frame[3] = length & 0xFF;
 8000afc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b00:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000b04:	881b      	ldrh	r3, [r3, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b10:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000b12:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b16:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	425b      	negs	r3, r3
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b2a:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000b32:	e023      	b.n	8000b7c <PN532_WriteFrame+0x122>
        frame[5 + i] = data[i];
 8000b34:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b38:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b3c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000b40:	6812      	ldr	r2, [r2, #0]
 8000b42:	441a      	add	r2, r3
 8000b44:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b48:	3305      	adds	r3, #5
 8000b4a:	7811      	ldrb	r1, [r2, #0]
 8000b4c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b50:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000b54:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000b56:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b5a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b5e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8000b62:	6812      	ldr	r2, [r2, #0]
 8000b64:	4413      	add	r3, r2
 8000b66:	781a      	ldrb	r2, [r3, #0]
 8000b68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000b72:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b76:	3301      	adds	r3, #1
 8000b78:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000b7c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000b86:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000b8a:	8812      	ldrh	r2, [r2, #0]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8d1      	bhi.n	8000b34 <PN532_WriteFrame+0xda>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000b90:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000b94:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	3305      	adds	r3, #5
 8000b9c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	b2d1      	uxtb	r1, r2
 8000ba4:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ba8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000bac:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bb2:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	3306      	adds	r3, #6
 8000bba:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000bbe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000bc6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000bca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000bd6:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000bda:	8812      	ldrh	r2, [r2, #0]
 8000bdc:	3207      	adds	r2, #7
 8000bde:	b291      	uxth	r1, r2
 8000be0:	f107 0214 	add.w	r2, r7, #20
 8000be4:	4610      	mov	r0, r2
 8000be6:	4798      	blx	r3
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d002      	beq.n	8000bf4 <PN532_WriteFrame+0x19a>
        return PN532_STATUS_ERROR;
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf2:	e000      	b.n	8000bf6 <PN532_WriteFrame+0x19c>
    }
    return PN532_STATUS_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0c8      	sub	sp, #288	; 0x120
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c0a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c0e:	6018      	str	r0, [r3, #0]
 8000c10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000c18:	6019      	str	r1, [r3, #0]
 8000c1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c1e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000c22:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000c2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c3a:	f5a2 728d 	sub.w	r2, r2, #282	; 0x11a
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	3207      	adds	r2, #7
 8000c42:	b291      	uxth	r1, r2
 8000c44:	f107 0214 	add.w	r2, r7, #20
 8000c48:	4610      	mov	r0, r2
 8000c4a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000c52:	e019      	b.n	8000c88 <PN532_ReadFrame+0x88>
        offset += 1;
 8000c54:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000c5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c62:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	1dda      	adds	r2, r3, #7
 8000c6a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	da0a      	bge.n	8000c88 <PN532_ReadFrame+0x88>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000c72:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000c76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	485b      	ldr	r0, [pc, #364]	; (8000dec <PN532_ReadFrame+0x1ec>)
 8000c80:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e0ab      	b.n	8000de0 <PN532_ReadFrame+0x1e0>
    while (buff[offset] == 0x00) {
 8000c88:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c8c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000c90:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000c94:	5cd3      	ldrb	r3, [r2, r3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0dc      	beq.n	8000c54 <PN532_ReadFrame+0x54>
        }
    }
    if (buff[offset] != 0xFF) {
 8000c9a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000c9e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000ca2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	d00a      	beq.n	8000cc2 <PN532_ReadFrame+0xc2>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000cac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cb0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	484c      	ldr	r0, [pc, #304]	; (8000dec <PN532_ReadFrame+0x1ec>)
 8000cba:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	e08e      	b.n	8000de0 <PN532_ReadFrame+0x1e0>
    }
    offset += 1;
 8000cc2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000ccc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000cd0:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	1dda      	adds	r2, r3, #7
 8000cd8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	da0a      	bge.n	8000cf6 <PN532_ReadFrame+0xf6>
        pn532->log("Response contains no data!");
 8000ce0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ce4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4840      	ldr	r0, [pc, #256]	; (8000df0 <PN532_ReadFrame+0x1f0>)
 8000cee:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	e074      	b.n	8000de0 <PN532_ReadFrame+0x1e0>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000cf6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000cfa:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000cfe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000d08:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d12:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d16:	5cd2      	ldrb	r2, [r2, r3]
 8000d18:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000d1c:	4413      	add	r3, r2
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <PN532_ReadFrame+0x13a>
        pn532->log("Response length checksum did not match length!");
 8000d24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d28:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	4830      	ldr	r0, [pc, #192]	; (8000df4 <PN532_ReadFrame+0x1f4>)
 8000d32:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	e052      	b.n	8000de0 <PN532_ReadFrame+0x1e0>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000d40:	e014      	b.n	8000d6c <PN532_ReadFrame+0x16c>
        checksum += buff[offset + 2 + i];
 8000d42:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000d46:	1c9a      	adds	r2, r3, #2
 8000d48:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000d52:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d56:	5cd2      	ldrb	r2, [r2, r3]
 8000d58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d5c:	4413      	add	r3, r2
 8000d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000d62:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d66:	3301      	adds	r3, #1
 8000d68:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000d6c:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000d70:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d2e4      	bcs.n	8000d42 <PN532_ReadFrame+0x142>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000d78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00a      	beq.n	8000d96 <PN532_ReadFrame+0x196>
        pn532->log("Response checksum did not match expected checksum");
 8000d80:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000d84:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	481a      	ldr	r0, [pc, #104]	; (8000df8 <PN532_ReadFrame+0x1f8>)
 8000d8e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	e024      	b.n	8000de0 <PN532_ReadFrame+0x1e0>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000d9c:	e018      	b.n	8000dd0 <PN532_ReadFrame+0x1d0>
        response[i] = buff[offset + 2 + i];
 8000d9e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000da2:	1c9a      	adds	r2, r3, #2
 8000da4:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000da8:	441a      	add	r2, r3
 8000daa:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000dae:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000db2:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 8000db6:	6809      	ldr	r1, [r1, #0]
 8000db8:	440b      	add	r3, r1
 8000dba:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000dbe:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8000dc2:	5c8a      	ldrb	r2, [r1, r2]
 8000dc4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000dc6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000dca:	3301      	adds	r3, #1
 8000dcc:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000dd0:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000dd4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3e0      	bcc.n	8000d9e <PN532_ReadFrame+0x19e>
    }
    return frame_len;
 8000ddc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	080052d8 	.word	0x080052d8
 8000df0:	0800530c 	.word	0x0800530c
 8000df4:	08005328 	.word	0x08005328
 8000df8:	08005358 	.word	0x08005358

08000dfc <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b0c7      	sub	sp, #284	; 0x11c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	f507 748c 	add.w	r4, r7, #280	; 0x118
 8000e06:	f5a4 7486 	sub.w	r4, r4, #268	; 0x10c
 8000e0a:	6020      	str	r0, [r4, #0]
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000e12:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000e16:	600a      	str	r2, [r1, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e1e:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000e22:	4602      	mov	r2, r0
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e2a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000e2e:	460a      	mov	r2, r1
 8000e30:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000e32:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e3a:	22d4      	movs	r2, #212	; 0xd4
 8000e3c:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000e3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000e46:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000e4a:	f2a2 120d 	subw	r2, r2, #269	; 0x10d
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000e52:	2300      	movs	r3, #0
 8000e54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000e58:	e012      	b.n	8000e80 <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8000e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000e62:	441a      	add	r2, r3
 8000e64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e68:	3302      	adds	r3, #2
 8000e6a:	7811      	ldrb	r1, [r2, #0]
 8000e6c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000e70:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000e74:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000e76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000e80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d8e5      	bhi.n	8000e5a <PN532_CallFunction+0x5e>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000e8e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000e92:	3302      	adds	r3, #2
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	f107 0110 	add.w	r1, r7, #16
 8000e9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	f7ff fdd9 	bl	8000a5a <PN532_WriteFrame>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d011      	beq.n	8000ed2 <PN532_CallFunction+0xd6>
        pn532->wakeup();
 8000eae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000eb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000ebc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ec0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	485b      	ldr	r0, [pc, #364]	; (8001038 <PN532_CallFunction+0x23c>)
 8000eca:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed0:	e0ac      	b.n	800102c <PN532_CallFunction+0x230>
    }
    if (!pn532->wait_ready(timeout)) {
 8000ed2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000ee2:	4798      	blx	r3
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <PN532_CallFunction+0xfa>
        return PN532_STATUS_ERROR;
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef4:	e09a      	b.n	800102c <PN532_CallFunction+0x230>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000ef6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f107 0210 	add.w	r2, r7, #16
 8000f06:	2106      	movs	r1, #6
 8000f08:	4610      	mov	r0, r2
 8000f0a:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000f12:	e01c      	b.n	8000f4e <PN532_CallFunction+0x152>
        if (PN532_ACK[i] != buff[i]) {
 8000f14:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f18:	4a48      	ldr	r2, [pc, #288]	; (800103c <PN532_CallFunction+0x240>)
 8000f1a:	5cd2      	ldrb	r2, [r2, r3]
 8000f1c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f20:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000f24:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8000f28:	5ccb      	ldrb	r3, [r1, r3]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d00a      	beq.n	8000f44 <PN532_CallFunction+0x148>
            pn532->log("Did not receive expected ACK from PN532!");
 8000f2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	4841      	ldr	r0, [pc, #260]	; (8001040 <PN532_CallFunction+0x244>)
 8000f3c:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e073      	b.n	800102c <PN532_CallFunction+0x230>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000f44:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f48:	3301      	adds	r3, #1
 8000f4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000f4e:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d9de      	bls.n	8000f14 <PN532_CallFunction+0x118>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000f56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000f66:	4798      	blx	r3
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f083 0301 	eor.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <PN532_CallFunction+0x17e>
        return PN532_STATUS_ERROR;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
 8000f78:	e058      	b.n	800102c <PN532_CallFunction+0x230>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000f7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f7e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000f82:	881b      	ldrh	r3, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f107 0110 	add.w	r1, r7, #16
 8000f8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000f90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f7ff fe33 	bl	8000c00 <PN532_ReadFrame>
 8000f9a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000f9e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2bd5      	cmp	r3, #213	; 0xd5
 8000faa:	d10d      	bne.n	8000fc8 <PN532_CallFunction+0x1cc>
 8000fac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fb4:	785b      	ldrb	r3, [r3, #1]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fbc:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d00a      	beq.n	8000fde <PN532_CallFunction+0x1e2>
        pn532->log("Received unexpected command response!");
 8000fc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	481b      	ldr	r0, [pc, #108]	; (8001044 <PN532_CallFunction+0x248>)
 8000fd6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fdc:	e026      	b.n	800102c <PN532_CallFunction+0x230>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000fe4:	e015      	b.n	8001012 <PN532_CallFunction+0x216>
        response[i] = buff[i + 2];
 8000fe6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000fea:	1c9a      	adds	r2, r3, #2
 8000fec:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000ff0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000ff4:	f5a1 718a 	sub.w	r1, r1, #276	; 0x114
 8000ff8:	6809      	ldr	r1, [r1, #0]
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001000:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 8001004:	5c8a      	ldrb	r2, [r1, r2]
 8001006:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001008:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8001012:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001016:	b29b      	uxth	r3, r3
 8001018:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800101c:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001020:	8812      	ldrh	r2, [r2, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d8df      	bhi.n	8000fe6 <PN532_CallFunction+0x1ea>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001026:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800102a:	3b02      	subs	r3, #2
}
 800102c:	4618      	mov	r0, r3
 800102e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	bf00      	nop
 8001038:	0800538c 	.word	0x0800538c
 800103c:	08005464 	.word	0x08005464
 8001040:	080053a0 	.word	0x080053a0
 8001044:	080053cc 	.word	0x080053cc

08001048 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af04      	add	r7, sp, #16
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8001052:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	2300      	movs	r3, #0
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	2300      	movs	r3, #0
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	2304      	movs	r3, #4
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	2102      	movs	r1, #2
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fec8 	bl	8000dfc <PN532_CallFunction>
 800106c:	4603      	mov	r3, r0
 800106e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001072:	d106      	bne.n	8001082 <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <PN532_GetFirmwareVersion+0x44>)
 800107a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	e000      	b.n	8001084 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	080053f4 	.word	0x080053f4

08001090 <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af04      	add	r7, sp, #16
 8001096:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <PN532_SamConfiguration+0x40>)
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	4611      	mov	r1, r2
 80010a2:	8019      	strh	r1, [r3, #0]
 80010a4:	3302      	adds	r3, #2
 80010a6:	0c12      	lsrs	r2, r2, #16
 80010a8:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2303      	movs	r3, #3
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2300      	movs	r3, #0
 80010bc:	2200      	movs	r2, #0
 80010be:	2114      	movs	r1, #20
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff fe9b 	bl	8000dfc <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	08005410 	.word	0x08005410

080010d4 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	; 0x40
 80010d8:	af04      	add	r7, sp, #16
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80010e4:	2301      	movs	r3, #1
 80010e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80010f0:	f107 0210 	add.w	r2, r7, #16
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2302      	movs	r3, #2
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2313      	movs	r3, #19
 8001104:	214a      	movs	r1, #74	; 0x4a
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff fe78 	bl	8000dfc <PN532_CallFunction>
 800110c:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 800110e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	da02      	bge.n	800111a <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8001114:	f04f 33ff 	mov.w	r3, #4294967295
 8001118:	e02e      	b.n	8001178 <PN532_ReadPassiveTarget+0xa4>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 800111a:	7c3b      	ldrb	r3, [r7, #16]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d006      	beq.n	800112e <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	4816      	ldr	r0, [pc, #88]	; (8001180 <PN532_ReadPassiveTarget+0xac>)
 8001126:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	e024      	b.n	8001178 <PN532_ReadPassiveTarget+0xa4>
    }
    if (buff[5] > 7) {
 800112e:	7d7b      	ldrb	r3, [r7, #21]
 8001130:	2b07      	cmp	r3, #7
 8001132:	d906      	bls.n	8001142 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	4812      	ldr	r0, [pc, #72]	; (8001184 <PN532_ReadPassiveTarget+0xb0>)
 800113a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	e01a      	b.n	8001178 <PN532_ReadPassiveTarget+0xa4>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001142:	2300      	movs	r3, #0
 8001144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001148:	e010      	b.n	800116c <PN532_ReadPassiveTarget+0x98>
        response[i] = buff[6 + i];
 800114a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800114e:	1d9a      	adds	r2, r3, #6
 8001150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	440b      	add	r3, r1
 8001158:	3230      	adds	r2, #48	; 0x30
 800115a:	443a      	add	r2, r7
 800115c:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001160:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001162:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001166:	3301      	adds	r3, #1
 8001168:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800116c:	7d7b      	ldrb	r3, [r7, #21]
 800116e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001172:	429a      	cmp	r2, r3
 8001174:	d3e9      	bcc.n	800114a <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8001176:	7d7b      	ldrb	r3, [r7, #21]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	08005414 	.word	0x08005414
 8001184:	08005434 	.word	0x08005434

08001188 <PN532_Reset>:
extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_RESET);
    HAL_Delay(500);
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);*/
    return PN532_STATUS_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <PN532_Log>:

void PN532_Log(const char* log) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <PN532_Log+0x18>)
 80011a4:	f003 f8fe 	bl	80043a4 <iprintf>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	0800545c 	.word	0x0800545c

080011b4 <i2c_read>:
 * End: SPI
 **************************************************************************/
/**************************************************************************
 * I2C
 **************************************************************************/
void i2c_read(uint8_t* data, uint16_t count) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af02      	add	r7, sp, #8
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	220a      	movs	r2, #10
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	2148      	movs	r1, #72	; 0x48
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <i2c_read+0x24>)
 80011cc:	f001 f85a 	bl	8002284 <HAL_I2C_Master_Receive>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000094 	.word	0x20000094

080011dc <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af02      	add	r7, sp, #8
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	220a      	movs	r2, #10
 80011ec:	9200      	str	r2, [sp, #0]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	2148      	movs	r1, #72	; 0x48
 80011f2:	4803      	ldr	r0, [pc, #12]	; (8001200 <i2c_write+0x24>)
 80011f4:	f000 ff48 	bl	8002088 <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000094 	.word	0x20000094

08001204 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8001204:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001208:	b087      	sub	sp, #28
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	466b      	mov	r3, sp
 8001214:	461e      	mov	r6, r3
    uint8_t status[] = {0x00};
 8001216:	2300      	movs	r3, #0
 8001218:	723b      	strb	r3, [r7, #8]
    uint8_t frame[count + 1];
 800121a:	887b      	ldrh	r3, [r7, #2]
 800121c:	1c59      	adds	r1, r3, #1
 800121e:	1e4b      	subs	r3, r1, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	460a      	mov	r2, r1
 8001224:	2300      	movs	r3, #0
 8001226:	4690      	mov	r8, r2
 8001228:	4699      	mov	r9, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800123a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800123e:	460a      	mov	r2, r1
 8001240:	2300      	movs	r3, #0
 8001242:	4614      	mov	r4, r2
 8001244:	461d      	mov	r5, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	00eb      	lsls	r3, r5, #3
 8001250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001254:	00e2      	lsls	r2, r4, #3
 8001256:	460b      	mov	r3, r1
 8001258:	3307      	adds	r3, #7
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	00db      	lsls	r3, r3, #3
 800125e:	ebad 0d03 	sub.w	sp, sp, r3
 8001262:	466b      	mov	r3, sp
 8001264:	3300      	adds	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
    i2c_read(status, sizeof(status));
 8001268:	f107 0308 	add.w	r3, r7, #8
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffa0 	bl	80011b4 <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 8001274:	7a3b      	ldrb	r3, [r7, #8]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d002      	beq.n	8001280 <PN532_I2C_ReadData+0x7c>
        return PN532_STATUS_ERROR;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
 800127e:	e01a      	b.n	80012b6 <PN532_I2C_ReadData+0xb2>
    }
    i2c_read(frame, count + 1);
 8001280:	887b      	ldrh	r3, [r7, #2]
 8001282:	3301      	adds	r3, #1
 8001284:	b29b      	uxth	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff ff93 	bl	80011b4 <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 800128e:	2300      	movs	r3, #0
 8001290:	75fb      	strb	r3, [r7, #23]
 8001292:	e00a      	b.n	80012aa <PN532_I2C_ReadData+0xa6>
        data[i] = frame[i + 1];
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	440b      	add	r3, r1
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	5c8a      	ldrb	r2, [r1, r2]
 80012a2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	3301      	adds	r3, #1
 80012a8:	75fb      	strb	r3, [r7, #23]
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d8ef      	bhi.n	8001294 <PN532_I2C_ReadData+0x90>
    }
    return PN532_STATUS_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	46b5      	mov	sp, r6
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080012c2 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	460b      	mov	r3, r1
 80012cc:	807b      	strh	r3, [r7, #2]
    i2c_write(data, count);
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ff82 	bl	80011dc <i2c_write>
    return PN532_STATUS_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 80012ea:	2300      	movs	r3, #0
 80012ec:	723b      	strb	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 80012ee:	f000 fa91 	bl	8001814 <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80012f4:	e00d      	b.n	8001312 <PN532_I2C_WaitReady+0x30>
        i2c_read(status, sizeof(status));
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff59 	bl	80011b4 <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8001302:	7a3b      	ldrb	r3, [r7, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d101      	bne.n	800130c <PN532_I2C_WaitReady+0x2a>
            return true;
 8001308:	2301      	movs	r3, #1
 800130a:	e00b      	b.n	8001324 <PN532_I2C_WaitReady+0x42>
        } else {
            HAL_Delay(5);
 800130c:	2005      	movs	r0, #5
 800130e:	f000 fa8d 	bl	800182c <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001312:	f000 fa7f 	bl	8001814 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	d8e9      	bhi.n	80012f6 <PN532_I2C_WaitReady+0x14>
        }
    }
    return false;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <PN532_I2C_Wakeup>:

int PN532_I2C_Wakeup(void) {
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_RESET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);*/
    return PN532_STATUS_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PN532_I2C_Init>:

void PN532_I2C_Init(PN532* pn532) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a0c      	ldr	r2, [pc, #48]	; (8001378 <PN532_I2C_Init+0x3c>)
 8001348:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_I2C_ReadData;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <PN532_I2C_Init+0x40>)
 800134e:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <PN532_I2C_Init+0x44>)
 8001354:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <PN532_I2C_Init+0x48>)
 800135a:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_I2C_Wakeup;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <PN532_I2C_Init+0x4c>)
 8001360:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <PN532_I2C_Init+0x50>)
 8001366:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4798      	blx	r3
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	08001189 	.word	0x08001189
 800137c:	08001205 	.word	0x08001205
 8001380:	080012c3 	.word	0x080012c3
 8001384:	080012e3 	.word	0x080012e3
 8001388:	0800132d 	.word	0x0800132d
 800138c:	08001199 	.word	0x08001199

08001390 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_MspInit+0x4c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_MspInit+0x4c>)
 80013a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a4:	6453      	str	r3, [r2, #68]	; 0x44
 80013a6:	4b0d      	ldr	r3, [pc, #52]	; (80013dc <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_MspInit+0x4c>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ce:	2007      	movs	r0, #7
 80013d0:	f000 fb20 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800

080013e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_I2C_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_I2C_MspInit+0x88>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141e:	23c0      	movs	r3, #192	; 0xc0
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001422:	2312      	movs	r3, #18
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142e:	2304      	movs	r3, #4
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <HAL_I2C_MspInit+0x8c>)
 800143a:	f000 fb2d 	bl	8001a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_I2C_MspInit+0x88>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	; 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10d      	bne.n	800149e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_TIM_Base_MspInit+0x40>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40000400 	.word	0x40000400
 80014b0:	40023800 	.word	0x40023800

080014b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a12      	ldr	r2, [pc, #72]	; (800151c <HAL_TIM_MspPostInit+0x68>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d11d      	bne.n	8001512 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <HAL_TIM_MspPostInit+0x6c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_TIM_MspPostInit+0x6c>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_TIM_MspPostInit+0x6c>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = MotorPWM_Pin;
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001502:	2302      	movs	r3, #2
 8001504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWM_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_TIM_MspPostInit+0x70>)
 800150e:	f000 fac3 	bl	8001a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40000400 	.word	0x40000400
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001574:	f000 f93a 	bl	80017ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Reader_Interrupt_Pin);
 8001580:	2002      	movs	r0, #2
 8001582:	f000 fc25 	bl	8001dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}

0800158a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e00a      	b.n	80015b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800159c:	f3af 8000 	nop.w
 80015a0:	4601      	mov	r1, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	b2ca      	uxtb	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3301      	adds	r3, #1
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	dbf0      	blt.n	800159c <_read+0x12>
  }

  return len;
 80015ba:	687b      	ldr	r3, [r7, #4]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	e009      	b.n	80015ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	60ba      	str	r2, [r7, #8]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	dbf1      	blt.n	80015d6 <_write+0x12>
  }
  return len;
 80015f2:	687b      	ldr	r3, [r7, #4]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}

080015fc <_close>:

int _close(int file)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001624:	605a      	str	r2, [r3, #4]
  return 0;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_isatty>:

int _isatty(int file)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800164a:	b480      	push	{r7}
 800164c:	b085      	sub	sp, #20
 800164e:	af00      	add	r7, sp, #0
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f002 fe54 	bl	8004340 <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20020000 	.word	0x20020000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	2000025c 	.word	0x2000025c
 80016cc:	20000278 	.word	0x20000278

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800172c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016fa:	490e      	ldr	r1, [pc, #56]	; (8001734 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001710:	4c0b      	ldr	r4, [pc, #44]	; (8001740 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171e:	f7ff ffd7 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001722:	f002 fe13 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001726:	f7fe ffd5 	bl	80006d4 <main>
  bx  lr    
 800172a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800172c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001734:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001738:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 800173c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001740:	20000274 	.word	0x20000274

08001744 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001744:	e7fe      	b.n	8001744 <ADC_IRQHandler>
	...

08001748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <HAL_Init+0x40>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001756:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001758:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <HAL_Init+0x40>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_Init+0x40>)
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f94f 	bl	8001a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001776:	2000      	movs	r0, #0
 8001778:	f000 f808 	bl	800178c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800177c:	f7ff fe08 	bl	8001390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023c00 	.word	0x40023c00

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_InitTick+0x54>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_InitTick+0x58>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	4619      	mov	r1, r3
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 f967 	bl	8001a7e <HAL_SYSTICK_Config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e00e      	b.n	80017d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b0f      	cmp	r3, #15
 80017be:	d80a      	bhi.n	80017d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c0:	2200      	movs	r2, #0
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	f04f 30ff 	mov.w	r0, #4294967295
 80017c8:	f000 f92f 	bl	8001a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017cc:	4a06      	ldr	r2, [pc, #24]	; (80017e8 <HAL_InitTick+0x5c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e000      	b.n	80017d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000004 	.word	0x20000004
 80017e4:	2000000c 	.word	0x2000000c
 80017e8:	20000008 	.word	0x20000008

080017ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x20>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <HAL_IncTick+0x24>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	4a04      	ldr	r2, [pc, #16]	; (8001810 <HAL_IncTick+0x24>)
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000000c 	.word	0x2000000c
 8001810:	20000260 	.word	0x20000260

08001814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return uwTick;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_GetTick+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000260 	.word	0x20000260

0800182c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff ffee 	bl	8001814 <HAL_GetTick>
 8001838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001844:	d005      	beq.n	8001852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <HAL_Delay+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001852:	bf00      	nop
 8001854:	f7ff ffde 	bl	8001814 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	429a      	cmp	r2, r3
 8001862:	d8f7      	bhi.n	8001854 <HAL_Delay+0x28>
  {
  }
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000000c 	.word	0x2000000c

08001874 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800189c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018a6:	4a04      	ldr	r2, [pc, #16]	; (80018b8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	60d3      	str	r3, [r2, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__NVIC_GetPriorityGrouping+0x18>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	0a1b      	lsrs	r3, r3, #8
 80018c6:	f003 0307 	and.w	r3, r3, #7
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	db0b      	blt.n	8001902 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	4907      	ldr	r1, [pc, #28]	; (8001910 <__NVIC_EnableIRQ+0x38>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	2001      	movs	r0, #1
 80018fa:	fa00 f202 	lsl.w	r2, r0, r2
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000e100 	.word	0xe000e100

08001914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	2b00      	cmp	r3, #0
 8001926:	db0a      	blt.n	800193e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	490c      	ldr	r1, [pc, #48]	; (8001960 <__NVIC_SetPriority+0x4c>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	0112      	lsls	r2, r2, #4
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	440b      	add	r3, r1
 8001938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800193c:	e00a      	b.n	8001954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	4908      	ldr	r1, [pc, #32]	; (8001964 <__NVIC_SetPriority+0x50>)
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	3b04      	subs	r3, #4
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	440b      	add	r3, r1
 8001952:	761a      	strb	r2, [r3, #24]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e100 	.word	0xe000e100
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001968:	b480      	push	{r7}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f1c3 0307 	rsb	r3, r3, #7
 8001982:	2b04      	cmp	r3, #4
 8001984:	bf28      	it	cs
 8001986:	2304      	movcs	r3, #4
 8001988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3304      	adds	r3, #4
 800198e:	2b06      	cmp	r3, #6
 8001990:	d902      	bls.n	8001998 <NVIC_EncodePriority+0x30>
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	3b03      	subs	r3, #3
 8001996:	e000      	b.n	800199a <NVIC_EncodePriority+0x32>
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	f04f 32ff 	mov.w	r2, #4294967295
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	401a      	ands	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43d9      	mvns	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c0:	4313      	orrs	r3, r2
         );
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3b01      	subs	r3, #1
 80019dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e0:	d301      	bcc.n	80019e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00f      	b.n	8001a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <SysTick_Config+0x40>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ee:	210f      	movs	r1, #15
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f7ff ff8e 	bl	8001914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <SysTick_Config+0x40>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019fe:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <SysTick_Config+0x40>)
 8001a00:	2207      	movs	r2, #7
 8001a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	e000e010 	.word	0xe000e010

08001a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff29 	bl	8001874 <__NVIC_SetPriorityGrouping>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b086      	sub	sp, #24
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	4603      	mov	r3, r0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3c:	f7ff ff3e 	bl	80018bc <__NVIC_GetPriorityGrouping>
 8001a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7ff ff8e 	bl	8001968 <NVIC_EncodePriority>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff5d 	bl	8001914 <__NVIC_SetPriority>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff31 	bl	80018d8 <__NVIC_EnableIRQ>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ffa2 	bl	80019d0 <SysTick_Config>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b089      	sub	sp, #36	; 0x24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	e16b      	b.n	8001d8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 815a 	bne.w	8001d86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d005      	beq.n	8001aea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d130      	bne.n	8001b4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	091b      	lsrs	r3, r3, #4
 8001b36:	f003 0201 	and.w	r2, r3, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d017      	beq.n	8001b88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d123      	bne.n	8001bdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	08da      	lsrs	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3208      	adds	r2, #8
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0307 	and.w	r3, r3, #7
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	69b9      	ldr	r1, [r7, #24]
 8001bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	2203      	movs	r2, #3
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0203 	and.w	r2, r3, #3
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 80b4 	beq.w	8001d86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a5f      	ldr	r2, [pc, #380]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c3a:	4a5b      	ldr	r2, [pc, #364]	; (8001da8 <HAL_GPIO_Init+0x310>)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	220f      	movs	r2, #15
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <HAL_GPIO_Init+0x314>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02b      	beq.n	8001cbe <HAL_GPIO_Init+0x226>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a51      	ldr	r2, [pc, #324]	; (8001db0 <HAL_GPIO_Init+0x318>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d025      	beq.n	8001cba <HAL_GPIO_Init+0x222>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a50      	ldr	r2, [pc, #320]	; (8001db4 <HAL_GPIO_Init+0x31c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d01f      	beq.n	8001cb6 <HAL_GPIO_Init+0x21e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4f      	ldr	r2, [pc, #316]	; (8001db8 <HAL_GPIO_Init+0x320>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d019      	beq.n	8001cb2 <HAL_GPIO_Init+0x21a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a4e      	ldr	r2, [pc, #312]	; (8001dbc <HAL_GPIO_Init+0x324>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0x216>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4d      	ldr	r2, [pc, #308]	; (8001dc0 <HAL_GPIO_Init+0x328>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00d      	beq.n	8001caa <HAL_GPIO_Init+0x212>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4c      	ldr	r2, [pc, #304]	; (8001dc4 <HAL_GPIO_Init+0x32c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d007      	beq.n	8001ca6 <HAL_GPIO_Init+0x20e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_GPIO_Init+0x330>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d101      	bne.n	8001ca2 <HAL_GPIO_Init+0x20a>
 8001c9e:	2307      	movs	r3, #7
 8001ca0:	e00e      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca2:	2308      	movs	r3, #8
 8001ca4:	e00c      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001ca6:	2306      	movs	r3, #6
 8001ca8:	e00a      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001caa:	2305      	movs	r3, #5
 8001cac:	e008      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cae:	2304      	movs	r3, #4
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x228>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	69fa      	ldr	r2, [r7, #28]
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd0:	4935      	ldr	r1, [pc, #212]	; (8001da8 <HAL_GPIO_Init+0x310>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d003      	beq.n	8001d80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_GPIO_Init+0x334>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	f67f ae90 	bls.w	8001ab4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3724      	adds	r7, #36	; 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40020000 	.word	0x40020000
 8001db0:	40020400 	.word	0x40020400
 8001db4:	40020800 	.word	0x40020800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40021400 	.word	0x40021400
 8001dc4:	40021800 	.word	0x40021800
 8001dc8:	40021c00 	.word	0x40021c00
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ddc:	695a      	ldr	r2, [r3, #20]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001de6:	4a05      	ldr	r2, [pc, #20]	; (8001dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dec:	88fb      	ldrh	r3, [r7, #6]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fe0e 	bl	8000a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013c00 	.word	0x40013c00

08001e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e12b      	b.n	800206a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fada 	bl	80013e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2224      	movs	r2, #36	; 0x24
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e64:	f001 fbd2 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 8001e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	4a81      	ldr	r2, [pc, #516]	; (8002074 <HAL_I2C_Init+0x274>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d807      	bhi.n	8001e84 <HAL_I2C_Init+0x84>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a80      	ldr	r2, [pc, #512]	; (8002078 <HAL_I2C_Init+0x278>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	e006      	b.n	8001e92 <HAL_I2C_Init+0x92>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a7d      	ldr	r2, [pc, #500]	; (800207c <HAL_I2C_Init+0x27c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	bf94      	ite	ls
 8001e8c:	2301      	movls	r3, #1
 8001e8e:	2300      	movhi	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e0e7      	b.n	800206a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4a78      	ldr	r2, [pc, #480]	; (8002080 <HAL_I2C_Init+0x280>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9b      	lsrs	r3, r3, #18
 8001ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a6a      	ldr	r2, [pc, #424]	; (8002074 <HAL_I2C_Init+0x274>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d802      	bhi.n	8001ed4 <HAL_I2C_Init+0xd4>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	e009      	b.n	8001ee8 <HAL_I2C_Init+0xe8>
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eda:	fb02 f303 	mul.w	r3, r2, r3
 8001ede:	4a69      	ldr	r2, [pc, #420]	; (8002084 <HAL_I2C_Init+0x284>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	495c      	ldr	r1, [pc, #368]	; (8002074 <HAL_I2C_Init+0x274>)
 8001f04:	428b      	cmp	r3, r1
 8001f06:	d819      	bhi.n	8001f3c <HAL_I2C_Init+0x13c>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1e59      	subs	r1, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f16:	1c59      	adds	r1, r3, #1
 8001f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_I2C_Init+0x138>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1e59      	subs	r1, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f30:	3301      	adds	r3, #1
 8001f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f36:	e051      	b.n	8001fdc <HAL_I2C_Init+0x1dc>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e04f      	b.n	8001fdc <HAL_I2C_Init+0x1dc>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d111      	bne.n	8001f68 <HAL_I2C_Init+0x168>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1e58      	subs	r0, r3, #1
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	440b      	add	r3, r1
 8001f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f56:	3301      	adds	r3, #1
 8001f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf0c      	ite	eq
 8001f60:	2301      	moveq	r3, #1
 8001f62:	2300      	movne	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e012      	b.n	8001f8e <HAL_I2C_Init+0x18e>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1e58      	subs	r0, r3, #1
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	0099      	lsls	r1, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf0c      	ite	eq
 8001f88:	2301      	moveq	r3, #1
 8001f8a:	2300      	movne	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Init+0x196>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e022      	b.n	8001fdc <HAL_I2C_Init+0x1dc>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10e      	bne.n	8001fbc <HAL_I2C_Init+0x1bc>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1e58      	subs	r0, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6859      	ldr	r1, [r3, #4]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	440b      	add	r3, r1
 8001fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fba:	e00f      	b.n	8001fdc <HAL_I2C_Init+0x1dc>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1e58      	subs	r0, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	0099      	lsls	r1, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	6809      	ldr	r1, [r1, #0]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69da      	ldr	r2, [r3, #28]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800200a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6911      	ldr	r1, [r2, #16]
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68d2      	ldr	r2, [r2, #12]
 8002016:	4311      	orrs	r1, r2
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	430b      	orrs	r3, r1
 800201e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	000186a0 	.word	0x000186a0
 8002078:	001e847f 	.word	0x001e847f
 800207c:	003d08ff 	.word	0x003d08ff
 8002080:	431bde83 	.word	0x431bde83
 8002084:	10624dd3 	.word	0x10624dd3

08002088 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	461a      	mov	r2, r3
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
 8002098:	4613      	mov	r3, r2
 800209a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff fbba 	bl	8001814 <HAL_GetTick>
 80020a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	f040 80e0 	bne.w	8002270 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2319      	movs	r3, #25
 80020b6:	2201      	movs	r2, #1
 80020b8:	4970      	ldr	r1, [pc, #448]	; (800227c <HAL_I2C_Master_Transmit+0x1f4>)
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fc58 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
 80020c8:	e0d3      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_I2C_Master_Transmit+0x50>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e0cc      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d007      	beq.n	80020fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2221      	movs	r2, #33	; 0x21
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2210      	movs	r2, #16
 800211a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	893a      	ldrh	r2, [r7, #8]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a50      	ldr	r2, [pc, #320]	; (8002280 <HAL_I2C_Master_Transmit+0x1f8>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fac2 	bl	80026d0 <I2C_MasterRequestWrite>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e08d      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800216c:	e066      	b.n	800223c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	6a39      	ldr	r1, [r7, #32]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fcd2 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00d      	beq.n	800219a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b04      	cmp	r3, #4
 8002184:	d107      	bne.n	8002196 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002194:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d11b      	bne.n	8002210 <HAL_I2C_Master_Transmit+0x188>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d017      	beq.n	8002210 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	6a39      	ldr	r1, [r7, #32]
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 fcc2 	bl	8002b9e <I2C_WaitOnBTFFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	2b04      	cmp	r3, #4
 8002226:	d107      	bne.n	8002238 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e01a      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d194      	bne.n	800216e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	e000      	b.n	8002272 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002270:	2302      	movs	r3, #2
  }
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	00100002 	.word	0x00100002
 8002280:	ffff0000 	.word	0xffff0000

08002284 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af02      	add	r7, sp, #8
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	461a      	mov	r2, r3
 8002290:	460b      	mov	r3, r1
 8002292:	817b      	strh	r3, [r7, #10]
 8002294:	4613      	mov	r3, r2
 8002296:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff fabc 	bl	8001814 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	f040 820b 	bne.w	80026c2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	2319      	movs	r3, #25
 80022b2:	2201      	movs	r2, #1
 80022b4:	497c      	ldr	r1, [pc, #496]	; (80024a8 <HAL_I2C_Master_Receive+0x224>)
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 fb5a 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80022c2:	2302      	movs	r3, #2
 80022c4:	e1fe      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_I2C_Master_Receive+0x50>
 80022d0:	2302      	movs	r3, #2
 80022d2:	e1f7      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d007      	beq.n	80022fa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 0201 	orr.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002308:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2222      	movs	r2, #34	; 0x22
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2210      	movs	r2, #16
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	893a      	ldrh	r2, [r7, #8]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_I2C_Master_Receive+0x228>)
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800233c:	8979      	ldrh	r1, [r7, #10]
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fa46 	bl	80027d4 <I2C_MasterRequestRead>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e1b8      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d113      	bne.n	8002382 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	623b      	str	r3, [r7, #32]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	623b      	str	r3, [r7, #32]
 800236e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	e18c      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	2b01      	cmp	r3, #1
 8002388:	d11b      	bne.n	80023c2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e16c      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d11b      	bne.n	8002402 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	61bb      	str	r3, [r7, #24]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	e14c      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002410:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002428:	e138      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242e:	2b03      	cmp	r3, #3
 8002430:	f200 80f1 	bhi.w	8002616 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	2b01      	cmp	r3, #1
 800243a:	d123      	bne.n	8002484 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800243c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fbed 	bl	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e139      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002482:	e10b      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002488:	2b02      	cmp	r3, #2
 800248a:	d14e      	bne.n	800252a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002492:	2200      	movs	r2, #0
 8002494:	4906      	ldr	r1, [pc, #24]	; (80024b0 <HAL_I2C_Master_Receive+0x22c>)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa6a 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e10e      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
 80024a6:	bf00      	nop
 80024a8:	00100002 	.word	0x00100002
 80024ac:	ffff0000 	.word	0xffff0000
 80024b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002528:	e0b8      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	2200      	movs	r2, #0
 8002532:	4966      	ldr	r1, [pc, #408]	; (80026cc <HAL_I2C_Master_Receive+0x448>)
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fa1b 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0bf      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	2200      	movs	r2, #0
 800258e:	494f      	ldr	r1, [pc, #316]	; (80026cc <HAL_I2C_Master_Receive+0x448>)
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f9ed 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e091      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d8:	b29b      	uxth	r3, r3
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002614:	e042      	b.n	800269c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fb00 	bl	8002c20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e04c      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d118      	bne.n	800269c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f aec2 	bne.w	800242a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026be:	2300      	movs	r3, #0
 80026c0:	e000      	b.n	80026c4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80026c2:	2302      	movs	r3, #2
  }
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	00010004 	.word	0x00010004

080026d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	460b      	mov	r3, r1
 80026de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d006      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d003      	beq.n	80026fa <I2C_MasterRequestWrite+0x2a>
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026f8:	d108      	bne.n	800270c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	e00b      	b.n	8002724 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002710:	2b12      	cmp	r3, #18
 8002712:	d107      	bne.n	8002724 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 f91d 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274a:	d103      	bne.n	8002754 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e035      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002760:	d108      	bne.n	8002774 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e01b      	b.n	80027ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	11db      	asrs	r3, r3, #7
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f003 0306 	and.w	r3, r3, #6
 800277e:	b2db      	uxtb	r3, r3
 8002780:	f063 030f 	orn	r3, r3, #15
 8002784:	b2da      	uxtb	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <I2C_MasterRequestWrite+0xfc>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 f943 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e010      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <I2C_MasterRequestWrite+0x100>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f933 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	00010008 	.word	0x00010008
 80027d0:	00010002 	.word	0x00010002

080027d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d006      	beq.n	800280e <I2C_MasterRequestRead+0x3a>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d003      	beq.n	800280e <I2C_MasterRequestRead+0x3a>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800280c:	d108      	bne.n	8002820 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e00b      	b.n	8002838 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	2b11      	cmp	r3, #17
 8002826:	d107      	bne.n	8002838 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f893 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	d103      	bne.n	8002868 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e079      	b.n	8002960 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002874:	d108      	bne.n	8002888 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e05f      	b.n	8002948 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	11db      	asrs	r3, r3, #7
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0306 	and.w	r3, r3, #6
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f063 030f 	orn	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4930      	ldr	r1, [pc, #192]	; (8002968 <I2C_MasterRequestRead+0x194>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f8b9 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e054      	b.n	8002960 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4929      	ldr	r1, [pc, #164]	; (800296c <I2C_MasterRequestRead+0x198>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f8a9 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e044      	b.n	8002960 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 f831 	bl	8002970 <I2C_WaitOnFlagUntilTimeout>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00d      	beq.n	8002930 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002922:	d103      	bne.n	800292c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e017      	b.n	8002960 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002930:	897b      	ldrh	r3, [r7, #10]
 8002932:	11db      	asrs	r3, r3, #7
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0306 	and.w	r3, r3, #6
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f063 030e 	orn	r3, r3, #14
 8002940:	b2da      	uxtb	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4907      	ldr	r1, [pc, #28]	; (800296c <I2C_MasterRequestRead+0x198>)
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f865 	bl	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	00010008 	.word	0x00010008
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002980:	e025      	b.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d021      	beq.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe ff43 	bl	8001814 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d116      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0220 	orr.w	r2, r3, #32
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e023      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d10d      	bne.n	80029f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4013      	ands	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	e00c      	b.n	8002a0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d0b6      	beq.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a2c:	e051      	b.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3c:	d123      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0204 	orr.w	r2, r3, #4
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e046      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d021      	beq.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fec1 	bl	8001814 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d116      	bne.n	8002ad2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0220 	orr.w	r2, r3, #32
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e020      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	0c1b      	lsrs	r3, r3, #16
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10c      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	e00b      	b.n	8002b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d18d      	bne.n	8002a2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b28:	e02d      	b.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8ce 	bl	8002ccc <I2C_IsAcknowledgeFailed>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e02d      	b.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d021      	beq.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fe fe67 	bl	8001814 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d116      	bne.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e007      	b.n	8002b96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b90:	2b80      	cmp	r3, #128	; 0x80
 8002b92:	d1ca      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002baa:	e02d      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f88d 	bl	8002ccc <I2C_IsAcknowledgeFailed>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e02d      	b.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc2:	d021      	beq.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc4:	f7fe fe26 	bl	8001814 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d302      	bcc.n	8002bda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d116      	bne.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e007      	b.n	8002c18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d1ca      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c2c:	e042      	b.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d119      	bne.n	8002c70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0210 	mvn.w	r2, #16
 8002c44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e029      	b.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c70:	f7fe fdd0 	bl	8001814 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d302      	bcc.n	8002c86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d116      	bne.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	d1b5      	bne.n	8002c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce2:	d11b      	bne.n	8002d1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0204 	orr.w	r2, r3, #4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e267      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d075      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4a:	4b88      	ldr	r3, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b85      	ldr	r3, [pc, #532]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e242      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x74>
 8002d92:	4b76      	ldr	r3, [pc, #472]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a68      	ldr	r2, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe fd16 	bl	8001814 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fd12 	bl	8001814 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e207      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fd02 	bl	8001814 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe fcfe 	bl	8001814 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	; 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1f3      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e42:	4b4a      	ldr	r3, [pc, #296]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b47      	ldr	r3, [pc, #284]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d11c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b44      	ldr	r3, [pc, #272]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1c7      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4937      	ldr	r1, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	e03a      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b34      	ldr	r3, [pc, #208]	; (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fcb7 	bl	8001814 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7fe fcb3 	bl	8001814 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1a8      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4925      	ldr	r1, [pc, #148]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fc96 	bl	8001814 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eec:	f7fe fc92 	bl	8001814 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e187      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe fc76 	bl	8001814 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fc72 	bl	8001814 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e167      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x200>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fc5f 	bl	8001814 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	e00e      	b.n	8002f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7fe fc5b 	bl	8001814 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d907      	bls.n	8002f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e150      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ea      	bne.n	8002f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a7c      	ldr	r2, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b77      	ldr	r3, [pc, #476]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b74      	ldr	r3, [pc, #464]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a73      	ldr	r2, [pc, #460]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe fc1b 	bl	8001814 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fc17 	bl	8001814 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e10c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x2ea>
 8003008:	4b64      	ldr	r3, [pc, #400]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a63      	ldr	r2, [pc, #396]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x30c>
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a5e      	ldr	r2, [pc, #376]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
 800302a:	4b5c      	ldr	r3, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302e:	4a5b      	ldr	r2, [pc, #364]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	; 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003038:	4b58      	ldr	r3, [pc, #352]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b55      	ldr	r3, [pc, #340]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a54      	ldr	r2, [pc, #336]	; (800319c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe fbdc 	bl	8001814 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe fbd8 	bl	8001814 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0cb      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b49      	ldr	r3, [pc, #292]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x334>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe fbc6 	bl	8001814 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fbc2 	bl	8001814 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b5      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b3e      	ldr	r3, [pc, #248]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	4a38      	ldr	r2, [pc, #224]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a1 	beq.w	800320c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ca:	4b34      	ldr	r3, [pc, #208]	; (800319c <HAL_RCC_OscConfig+0x470>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d05c      	beq.n	8003190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d141      	bne.n	8003162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fb96 	bl	8001814 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fb92 	bl	8001814 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e087      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	491b      	ldr	r1, [pc, #108]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fb6b 	bl	8001814 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe fb67 	bl	8001814 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e05c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x416>
 8003160:	e054      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fb54 	bl	8001814 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fb50 	bl	8001814 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e045      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	; (800319c <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x444>
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e038      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x4ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d121      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11a      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cc      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d90c      	bls.n	8003258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b65      	ldr	r3, [pc, #404]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a58      	ldr	r2, [pc, #352]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800327a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d044      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e067      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4934      	ldr	r1, [pc, #208]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fa82 	bl	8001814 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fa7e 	bl	8001814 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 f821 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe f9e2 	bl	800178c <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00
 80033d8:	40023800 	.word	0x40023800
 80033dc:	0800546c 	.word	0x0800546c
 80033e0:	20000004 	.word	0x20000004
 80033e4:	20000008 	.word	0x20000008

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b094      	sub	sp, #80	; 0x50
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	647b      	str	r3, [r7, #68]	; 0x44
 80033f4:	2300      	movs	r3, #0
 80033f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033f8:	2300      	movs	r3, #0
 80033fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003400:	4b79      	ldr	r3, [pc, #484]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d00d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x40>
 800340c:	2b08      	cmp	r3, #8
 800340e:	f200 80e1 	bhi.w	80035d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x3a>
 800341a:	e0db      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b73      	ldr	r3, [pc, #460]	; (80035ec <HAL_RCC_GetSysClockFreq+0x204>)
 800341e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003420:	e0db      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4b73      	ldr	r3, [pc, #460]	; (80035f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003426:	e0d8      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b6f      	ldr	r3, [pc, #444]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b6d      	ldr	r3, [pc, #436]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	2200      	movs	r2, #0
 8003446:	63bb      	str	r3, [r7, #56]	; 0x38
 8003448:	63fa      	str	r2, [r7, #60]	; 0x3c
 800344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003450:	633b      	str	r3, [r7, #48]	; 0x30
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	; 0x34
 8003456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346c:	0150      	lsls	r0, r2, #5
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4621      	mov	r1, r4
 8003474:	1a51      	subs	r1, r2, r1
 8003476:	6139      	str	r1, [r7, #16]
 8003478:	4629      	mov	r1, r5
 800347a:	eb63 0301 	sbc.w	r3, r3, r1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800348c:	4659      	mov	r1, fp
 800348e:	018b      	lsls	r3, r1, #6
 8003490:	4651      	mov	r1, sl
 8003492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003496:	4651      	mov	r1, sl
 8003498:	018a      	lsls	r2, r1, #6
 800349a:	4651      	mov	r1, sl
 800349c:	ebb2 0801 	subs.w	r8, r2, r1
 80034a0:	4659      	mov	r1, fp
 80034a2:	eb63 0901 	sbc.w	r9, r3, r1
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ba:	4690      	mov	r8, r2
 80034bc:	4699      	mov	r9, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	eb18 0303 	adds.w	r3, r8, r3
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	462b      	mov	r3, r5
 80034c8:	eb49 0303 	adc.w	r3, r9, r3
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034da:	4629      	mov	r1, r5
 80034dc:	024b      	lsls	r3, r1, #9
 80034de:	4621      	mov	r1, r4
 80034e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e4:	4621      	mov	r1, r4
 80034e6:	024a      	lsls	r2, r1, #9
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034f8:	f7fc feba 	bl	8000270 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003504:	e058      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b38      	ldr	r3, [pc, #224]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	4618      	mov	r0, r3
 8003510:	4611      	mov	r1, r2
 8003512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	f04f 0000 	mov.w	r0, #0
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	0159      	lsls	r1, r3, #5
 800352e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003532:	0150      	lsls	r0, r2, #5
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4641      	mov	r1, r8
 800353a:	ebb2 0a01 	subs.w	sl, r2, r1
 800353e:	4649      	mov	r1, r9
 8003540:	eb63 0b01 	sbc.w	fp, r3, r1
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003558:	ebb2 040a 	subs.w	r4, r2, sl
 800355c:	eb63 050b 	sbc.w	r5, r3, fp
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	00eb      	lsls	r3, r5, #3
 800356a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356e:	00e2      	lsls	r2, r4, #3
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	4643      	mov	r3, r8
 8003576:	18e3      	adds	r3, r4, r3
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	464b      	mov	r3, r9
 800357c:	eb45 0303 	adc.w	r3, r5, r3
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800358e:	4629      	mov	r1, r5
 8003590:	028b      	lsls	r3, r1, #10
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003598:	4621      	mov	r1, r4
 800359a:	028a      	lsls	r2, r1, #10
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	61fa      	str	r2, [r7, #28]
 80035a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ac:	f7fc fe60 	bl	8000270 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3750      	adds	r7, #80	; 0x50
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	007a1200 	.word	0x007a1200

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_RCC_GetHCLKFreq+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003610:	f7ff fff0 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	; (8003630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	0800547c 	.word	0x0800547c

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fd ff08 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fad8 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e041      	b.n	8003768 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f839 	bl	8003770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 fa89 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x24>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e022      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x3e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e015      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x58>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07c      	b.n	80038f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0x82>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	e013      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0x92>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003814:	e00b      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003824:	e003      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fce0 	bl	80041fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_TIM_PWM_Start+0x174>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_PWM_Start+0xcc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2c      	ldr	r2, [pc, #176]	; (80038fc <HAL_TIM_PWM_Start+0x178>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_TIM_PWM_Start+0xd0>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_TIM_PWM_Start+0xd2>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a22      	ldr	r2, [pc, #136]	; (80038f8 <HAL_TIM_PWM_Start+0x174>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d022      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387c:	d01d      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1f      	ldr	r2, [pc, #124]	; (8003900 <HAL_TIM_PWM_Start+0x17c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_TIM_PWM_Start+0x180>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <HAL_TIM_PWM_Start+0x184>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_TIM_PWM_Start+0x178>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <HAL_TIM_PWM_Start+0x188>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIM_PWM_Start+0x136>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_TIM_PWM_Start+0x18c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d111      	bne.n	80038de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d010      	beq.n	80038ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	e007      	b.n	80038ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40010000 	.word	0x40010000
 80038fc:	40010400 	.word	0x40010400
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800
 8003908:	40000c00 	.word	0x40000c00
 800390c:	40014000 	.word	0x40014000
 8003910:	40001800 	.word	0x40001800

08003914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ae      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f200 809f 	bhi.w	8003a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	08003a81 	.word	0x08003a81
 8003950:	08003a81 	.word	0x08003a81
 8003954:	08003a81 	.word	0x08003a81
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003a81 	.word	0x08003a81
 8003960:	08003a81 	.word	0x08003a81
 8003964:	08003a81 	.word	0x08003a81
 8003968:	080039ff 	.word	0x080039ff
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a81 	.word	0x08003a81
 8003974:	08003a81 	.word	0x08003a81
 8003978:	08003a3f 	.word	0x08003a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9f0 	bl	8003d68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e064      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa40 	bl	8003e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e043      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa95 	bl	8003f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e023      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fae9 	bl	800401c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	; 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	; 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	; 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	; 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	; 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	; 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	; 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	; 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	; 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	; 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f000 fb35 	bl	80041bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f000 fb1e 	bl	80041bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa92 	bl	80040c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	; 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 faeb 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 fab1 	bl	8004126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	; 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fadb 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 fa72 	bl	80040c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 facb 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 fac2 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d013      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c46:	d00f      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3d      	ldr	r2, [pc, #244]	; (8003d40 <TIM_Base_SetConfig+0x118>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d00b      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3c      	ldr	r2, [pc, #240]	; (8003d44 <TIM_Base_SetConfig+0x11c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d007      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <TIM_Base_SetConfig+0x120>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d108      	bne.n	8003c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2f      	ldr	r2, [pc, #188]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c88:	d027      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <TIM_Base_SetConfig+0x118>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d023      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2b      	ldr	r2, [pc, #172]	; (8003d44 <TIM_Base_SetConfig+0x11c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <TIM_Base_SetConfig+0x120>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d017      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <TIM_Base_SetConfig+0x128>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <TIM_Base_SetConfig+0x12c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00f      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	; (8003d58 <TIM_Base_SetConfig+0x130>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a25      	ldr	r2, [pc, #148]	; (8003d5c <TIM_Base_SetConfig+0x134>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a24      	ldr	r2, [pc, #144]	; (8003d60 <TIM_Base_SetConfig+0x138>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d003      	beq.n	8003cda <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <TIM_Base_SetConfig+0x13c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d108      	bne.n	8003cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <TIM_Base_SetConfig+0x114>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_Base_SetConfig+0xf8>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <TIM_Base_SetConfig+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d103      	bne.n	8003d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40010000 	.word	0x40010000
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800
 8003d48:	40000c00 	.word	0x40000c00
 8003d4c:	40010400 	.word	0x40010400
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800
 8003d5c:	40001800 	.word	0x40001800
 8003d60:	40001c00 	.word	0x40001c00
 8003d64:	40002000 	.word	0x40002000

08003d68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0201 	bic.w	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f023 0302 	bic.w	r3, r3, #2
 8003db0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a20      	ldr	r2, [pc, #128]	; (8003e40 <TIM_OC1_SetConfig+0xd8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC1_SetConfig+0x64>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <TIM_OC1_SetConfig+0xdc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10c      	bne.n	8003de6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0308 	bic.w	r3, r3, #8
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a15      	ldr	r2, [pc, #84]	; (8003e40 <TIM_OC1_SetConfig+0xd8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d003      	beq.n	8003df6 <TIM_OC1_SetConfig+0x8e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <TIM_OC1_SetConfig+0xdc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d111      	bne.n	8003e1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	621a      	str	r2, [r3, #32]
}
 8003e34:	bf00      	nop
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40010400 	.word	0x40010400

08003e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	f023 0210 	bic.w	r2, r3, #16
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0320 	bic.w	r3, r3, #32
 8003e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <TIM_OC2_SetConfig+0xe4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC2_SetConfig+0x68>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a21      	ldr	r2, [pc, #132]	; (8003f30 <TIM_OC2_SetConfig+0xe8>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10d      	bne.n	8003ecc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a17      	ldr	r2, [pc, #92]	; (8003f2c <TIM_OC2_SetConfig+0xe4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d003      	beq.n	8003edc <TIM_OC2_SetConfig+0x94>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <TIM_OC2_SetConfig+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	40010400 	.word	0x40010400

08003f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a21      	ldr	r2, [pc, #132]	; (8004014 <TIM_OC3_SetConfig+0xe0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC3_SetConfig+0x66>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <TIM_OC3_SetConfig+0xe4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10d      	bne.n	8003fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a16      	ldr	r2, [pc, #88]	; (8004014 <TIM_OC3_SetConfig+0xe0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d003      	beq.n	8003fc6 <TIM_OC3_SetConfig+0x92>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a15      	ldr	r2, [pc, #84]	; (8004018 <TIM_OC3_SetConfig+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d113      	bne.n	8003fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	621a      	str	r2, [r3, #32]
}
 8004008:	bf00      	nop
 800400a:	371c      	adds	r7, #28
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40010000 	.word	0x40010000
 8004018:	40010400 	.word	0x40010400

0800401c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	031b      	lsls	r3, r3, #12
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a12      	ldr	r2, [pc, #72]	; (80040c0 <TIM_OC4_SetConfig+0xa4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC4_SetConfig+0x68>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a11      	ldr	r2, [pc, #68]	; (80040c4 <TIM_OC4_SetConfig+0xa8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d109      	bne.n	8004098 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800408a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	621a      	str	r2, [r3, #32]
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40010400 	.word	0x40010400

080040c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 030a 	bic.w	r3, r3, #10
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0210 	bic.w	r2, r3, #16
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f043 0307 	orr.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	431a      	orrs	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2201      	movs	r2, #1
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	43db      	mvns	r3, r3
 800421e:	401a      	ands	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a1a      	ldr	r2, [r3, #32]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	431a      	orrs	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800425c:	2302      	movs	r3, #2
 800425e:	e05a      	b.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d022      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d01d      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40010400 	.word	0x40010400
 8004338:	40014000 	.word	0x40014000
 800433c:	40001800 	.word	0x40001800

08004340 <__errno>:
 8004340:	4b01      	ldr	r3, [pc, #4]	; (8004348 <__errno+0x8>)
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000010 	.word	0x20000010

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4d0d      	ldr	r5, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1b64      	subs	r4, r4, r5
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2600      	movs	r6, #0
 8004358:	42a6      	cmp	r6, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4d0b      	ldr	r5, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f000 ffae 	bl	80052c0 <_init>
 8004364:	1b64      	subs	r4, r4, r5
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2600      	movs	r6, #0
 800436a:	42a6      	cmp	r6, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f855 3b04 	ldr.w	r3, [r5], #4
 8004374:	4798      	blx	r3
 8004376:	3601      	adds	r6, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f855 3b04 	ldr.w	r3, [r5], #4
 800437e:	4798      	blx	r3
 8004380:	3601      	adds	r6, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08005524 	.word	0x08005524
 8004388:	08005524 	.word	0x08005524
 800438c:	08005524 	.word	0x08005524
 8004390:	08005528 	.word	0x08005528

08004394 <memset>:
 8004394:	4402      	add	r2, r0
 8004396:	4603      	mov	r3, r0
 8004398:	4293      	cmp	r3, r2
 800439a:	d100      	bne.n	800439e <memset+0xa>
 800439c:	4770      	bx	lr
 800439e:	f803 1b01 	strb.w	r1, [r3], #1
 80043a2:	e7f9      	b.n	8004398 <memset+0x4>

080043a4 <iprintf>:
 80043a4:	b40f      	push	{r0, r1, r2, r3}
 80043a6:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <iprintf+0x2c>)
 80043a8:	b513      	push	{r0, r1, r4, lr}
 80043aa:	681c      	ldr	r4, [r3, #0]
 80043ac:	b124      	cbz	r4, 80043b8 <iprintf+0x14>
 80043ae:	69a3      	ldr	r3, [r4, #24]
 80043b0:	b913      	cbnz	r3, 80043b8 <iprintf+0x14>
 80043b2:	4620      	mov	r0, r4
 80043b4:	f000 f866 	bl	8004484 <__sinit>
 80043b8:	ab05      	add	r3, sp, #20
 80043ba:	9a04      	ldr	r2, [sp, #16]
 80043bc:	68a1      	ldr	r1, [r4, #8]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 f9bd 	bl	8004740 <_vfiprintf_r>
 80043c6:	b002      	add	sp, #8
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	b004      	add	sp, #16
 80043ce:	4770      	bx	lr
 80043d0:	20000010 	.word	0x20000010

080043d4 <std>:
 80043d4:	2300      	movs	r3, #0
 80043d6:	b510      	push	{r4, lr}
 80043d8:	4604      	mov	r4, r0
 80043da:	e9c0 3300 	strd	r3, r3, [r0]
 80043de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043e2:	6083      	str	r3, [r0, #8]
 80043e4:	8181      	strh	r1, [r0, #12]
 80043e6:	6643      	str	r3, [r0, #100]	; 0x64
 80043e8:	81c2      	strh	r2, [r0, #14]
 80043ea:	6183      	str	r3, [r0, #24]
 80043ec:	4619      	mov	r1, r3
 80043ee:	2208      	movs	r2, #8
 80043f0:	305c      	adds	r0, #92	; 0x5c
 80043f2:	f7ff ffcf 	bl	8004394 <memset>
 80043f6:	4b05      	ldr	r3, [pc, #20]	; (800440c <std+0x38>)
 80043f8:	6263      	str	r3, [r4, #36]	; 0x24
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <std+0x3c>)
 80043fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <std+0x40>)
 8004400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <std+0x44>)
 8004404:	6224      	str	r4, [r4, #32]
 8004406:	6323      	str	r3, [r4, #48]	; 0x30
 8004408:	bd10      	pop	{r4, pc}
 800440a:	bf00      	nop
 800440c:	08004ce9 	.word	0x08004ce9
 8004410:	08004d0b 	.word	0x08004d0b
 8004414:	08004d43 	.word	0x08004d43
 8004418:	08004d67 	.word	0x08004d67

0800441c <_cleanup_r>:
 800441c:	4901      	ldr	r1, [pc, #4]	; (8004424 <_cleanup_r+0x8>)
 800441e:	f000 b8af 	b.w	8004580 <_fwalk_reent>
 8004422:	bf00      	nop
 8004424:	08005041 	.word	0x08005041

08004428 <__sfmoreglue>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2268      	movs	r2, #104	; 0x68
 800442c:	1e4d      	subs	r5, r1, #1
 800442e:	4355      	muls	r5, r2
 8004430:	460e      	mov	r6, r1
 8004432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004436:	f000 f8e5 	bl	8004604 <_malloc_r>
 800443a:	4604      	mov	r4, r0
 800443c:	b140      	cbz	r0, 8004450 <__sfmoreglue+0x28>
 800443e:	2100      	movs	r1, #0
 8004440:	e9c0 1600 	strd	r1, r6, [r0]
 8004444:	300c      	adds	r0, #12
 8004446:	60a0      	str	r0, [r4, #8]
 8004448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800444c:	f7ff ffa2 	bl	8004394 <memset>
 8004450:	4620      	mov	r0, r4
 8004452:	bd70      	pop	{r4, r5, r6, pc}

08004454 <__sfp_lock_acquire>:
 8004454:	4801      	ldr	r0, [pc, #4]	; (800445c <__sfp_lock_acquire+0x8>)
 8004456:	f000 b8b3 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 800445a:	bf00      	nop
 800445c:	20000265 	.word	0x20000265

08004460 <__sfp_lock_release>:
 8004460:	4801      	ldr	r0, [pc, #4]	; (8004468 <__sfp_lock_release+0x8>)
 8004462:	f000 b8ae 	b.w	80045c2 <__retarget_lock_release_recursive>
 8004466:	bf00      	nop
 8004468:	20000265 	.word	0x20000265

0800446c <__sinit_lock_acquire>:
 800446c:	4801      	ldr	r0, [pc, #4]	; (8004474 <__sinit_lock_acquire+0x8>)
 800446e:	f000 b8a7 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 8004472:	bf00      	nop
 8004474:	20000266 	.word	0x20000266

08004478 <__sinit_lock_release>:
 8004478:	4801      	ldr	r0, [pc, #4]	; (8004480 <__sinit_lock_release+0x8>)
 800447a:	f000 b8a2 	b.w	80045c2 <__retarget_lock_release_recursive>
 800447e:	bf00      	nop
 8004480:	20000266 	.word	0x20000266

08004484 <__sinit>:
 8004484:	b510      	push	{r4, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	f7ff fff0 	bl	800446c <__sinit_lock_acquire>
 800448c:	69a3      	ldr	r3, [r4, #24]
 800448e:	b11b      	cbz	r3, 8004498 <__sinit+0x14>
 8004490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004494:	f7ff bff0 	b.w	8004478 <__sinit_lock_release>
 8004498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800449c:	6523      	str	r3, [r4, #80]	; 0x50
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <__sinit+0x68>)
 80044a0:	4a13      	ldr	r2, [pc, #76]	; (80044f0 <__sinit+0x6c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80044a6:	42a3      	cmp	r3, r4
 80044a8:	bf04      	itt	eq
 80044aa:	2301      	moveq	r3, #1
 80044ac:	61a3      	streq	r3, [r4, #24]
 80044ae:	4620      	mov	r0, r4
 80044b0:	f000 f820 	bl	80044f4 <__sfp>
 80044b4:	6060      	str	r0, [r4, #4]
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 f81c 	bl	80044f4 <__sfp>
 80044bc:	60a0      	str	r0, [r4, #8]
 80044be:	4620      	mov	r0, r4
 80044c0:	f000 f818 	bl	80044f4 <__sfp>
 80044c4:	2200      	movs	r2, #0
 80044c6:	60e0      	str	r0, [r4, #12]
 80044c8:	2104      	movs	r1, #4
 80044ca:	6860      	ldr	r0, [r4, #4]
 80044cc:	f7ff ff82 	bl	80043d4 <std>
 80044d0:	68a0      	ldr	r0, [r4, #8]
 80044d2:	2201      	movs	r2, #1
 80044d4:	2109      	movs	r1, #9
 80044d6:	f7ff ff7d 	bl	80043d4 <std>
 80044da:	68e0      	ldr	r0, [r4, #12]
 80044dc:	2202      	movs	r2, #2
 80044de:	2112      	movs	r1, #18
 80044e0:	f7ff ff78 	bl	80043d4 <std>
 80044e4:	2301      	movs	r3, #1
 80044e6:	61a3      	str	r3, [r4, #24]
 80044e8:	e7d2      	b.n	8004490 <__sinit+0xc>
 80044ea:	bf00      	nop
 80044ec:	08005484 	.word	0x08005484
 80044f0:	0800441d 	.word	0x0800441d

080044f4 <__sfp>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	4607      	mov	r7, r0
 80044f8:	f7ff ffac 	bl	8004454 <__sfp_lock_acquire>
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <__sfp+0x84>)
 80044fe:	681e      	ldr	r6, [r3, #0]
 8004500:	69b3      	ldr	r3, [r6, #24]
 8004502:	b913      	cbnz	r3, 800450a <__sfp+0x16>
 8004504:	4630      	mov	r0, r6
 8004506:	f7ff ffbd 	bl	8004484 <__sinit>
 800450a:	3648      	adds	r6, #72	; 0x48
 800450c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004510:	3b01      	subs	r3, #1
 8004512:	d503      	bpl.n	800451c <__sfp+0x28>
 8004514:	6833      	ldr	r3, [r6, #0]
 8004516:	b30b      	cbz	r3, 800455c <__sfp+0x68>
 8004518:	6836      	ldr	r6, [r6, #0]
 800451a:	e7f7      	b.n	800450c <__sfp+0x18>
 800451c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004520:	b9d5      	cbnz	r5, 8004558 <__sfp+0x64>
 8004522:	4b16      	ldr	r3, [pc, #88]	; (800457c <__sfp+0x88>)
 8004524:	60e3      	str	r3, [r4, #12]
 8004526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800452a:	6665      	str	r5, [r4, #100]	; 0x64
 800452c:	f000 f847 	bl	80045be <__retarget_lock_init_recursive>
 8004530:	f7ff ff96 	bl	8004460 <__sfp_lock_release>
 8004534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800453c:	6025      	str	r5, [r4, #0]
 800453e:	61a5      	str	r5, [r4, #24]
 8004540:	2208      	movs	r2, #8
 8004542:	4629      	mov	r1, r5
 8004544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004548:	f7ff ff24 	bl	8004394 <memset>
 800454c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004554:	4620      	mov	r0, r4
 8004556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004558:	3468      	adds	r4, #104	; 0x68
 800455a:	e7d9      	b.n	8004510 <__sfp+0x1c>
 800455c:	2104      	movs	r1, #4
 800455e:	4638      	mov	r0, r7
 8004560:	f7ff ff62 	bl	8004428 <__sfmoreglue>
 8004564:	4604      	mov	r4, r0
 8004566:	6030      	str	r0, [r6, #0]
 8004568:	2800      	cmp	r0, #0
 800456a:	d1d5      	bne.n	8004518 <__sfp+0x24>
 800456c:	f7ff ff78 	bl	8004460 <__sfp_lock_release>
 8004570:	230c      	movs	r3, #12
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	e7ee      	b.n	8004554 <__sfp+0x60>
 8004576:	bf00      	nop
 8004578:	08005484 	.word	0x08005484
 800457c:	ffff0001 	.word	0xffff0001

08004580 <_fwalk_reent>:
 8004580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004584:	4606      	mov	r6, r0
 8004586:	4688      	mov	r8, r1
 8004588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800458c:	2700      	movs	r7, #0
 800458e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004592:	f1b9 0901 	subs.w	r9, r9, #1
 8004596:	d505      	bpl.n	80045a4 <_fwalk_reent+0x24>
 8004598:	6824      	ldr	r4, [r4, #0]
 800459a:	2c00      	cmp	r4, #0
 800459c:	d1f7      	bne.n	800458e <_fwalk_reent+0xe>
 800459e:	4638      	mov	r0, r7
 80045a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a4:	89ab      	ldrh	r3, [r5, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d907      	bls.n	80045ba <_fwalk_reent+0x3a>
 80045aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045ae:	3301      	adds	r3, #1
 80045b0:	d003      	beq.n	80045ba <_fwalk_reent+0x3a>
 80045b2:	4629      	mov	r1, r5
 80045b4:	4630      	mov	r0, r6
 80045b6:	47c0      	blx	r8
 80045b8:	4307      	orrs	r7, r0
 80045ba:	3568      	adds	r5, #104	; 0x68
 80045bc:	e7e9      	b.n	8004592 <_fwalk_reent+0x12>

080045be <__retarget_lock_init_recursive>:
 80045be:	4770      	bx	lr

080045c0 <__retarget_lock_acquire_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_release_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <sbrk_aligned>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4e0e      	ldr	r6, [pc, #56]	; (8004600 <sbrk_aligned+0x3c>)
 80045c8:	460c      	mov	r4, r1
 80045ca:	6831      	ldr	r1, [r6, #0]
 80045cc:	4605      	mov	r5, r0
 80045ce:	b911      	cbnz	r1, 80045d6 <sbrk_aligned+0x12>
 80045d0:	f000 fb7a 	bl	8004cc8 <_sbrk_r>
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 fb75 	bl	8004cc8 <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d00a      	beq.n	80045f8 <sbrk_aligned+0x34>
 80045e2:	1cc4      	adds	r4, r0, #3
 80045e4:	f024 0403 	bic.w	r4, r4, #3
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d007      	beq.n	80045fc <sbrk_aligned+0x38>
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fb6a 	bl	8004cc8 <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d101      	bne.n	80045fc <sbrk_aligned+0x38>
 80045f8:	f04f 34ff 	mov.w	r4, #4294967295
 80045fc:	4620      	mov	r0, r4
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	2000026c 	.word	0x2000026c

08004604 <_malloc_r>:
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	1ccd      	adds	r5, r1, #3
 800460a:	f025 0503 	bic.w	r5, r5, #3
 800460e:	3508      	adds	r5, #8
 8004610:	2d0c      	cmp	r5, #12
 8004612:	bf38      	it	cc
 8004614:	250c      	movcc	r5, #12
 8004616:	2d00      	cmp	r5, #0
 8004618:	4607      	mov	r7, r0
 800461a:	db01      	blt.n	8004620 <_malloc_r+0x1c>
 800461c:	42a9      	cmp	r1, r5
 800461e:	d905      	bls.n	800462c <_malloc_r+0x28>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	2600      	movs	r6, #0
 8004626:	4630      	mov	r0, r6
 8004628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800462c:	4e2e      	ldr	r6, [pc, #184]	; (80046e8 <_malloc_r+0xe4>)
 800462e:	f000 fdbb 	bl	80051a8 <__malloc_lock>
 8004632:	6833      	ldr	r3, [r6, #0]
 8004634:	461c      	mov	r4, r3
 8004636:	bb34      	cbnz	r4, 8004686 <_malloc_r+0x82>
 8004638:	4629      	mov	r1, r5
 800463a:	4638      	mov	r0, r7
 800463c:	f7ff ffc2 	bl	80045c4 <sbrk_aligned>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	4604      	mov	r4, r0
 8004644:	d14d      	bne.n	80046e2 <_malloc_r+0xde>
 8004646:	6834      	ldr	r4, [r6, #0]
 8004648:	4626      	mov	r6, r4
 800464a:	2e00      	cmp	r6, #0
 800464c:	d140      	bne.n	80046d0 <_malloc_r+0xcc>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	4631      	mov	r1, r6
 8004652:	4638      	mov	r0, r7
 8004654:	eb04 0803 	add.w	r8, r4, r3
 8004658:	f000 fb36 	bl	8004cc8 <_sbrk_r>
 800465c:	4580      	cmp	r8, r0
 800465e:	d13a      	bne.n	80046d6 <_malloc_r+0xd2>
 8004660:	6821      	ldr	r1, [r4, #0]
 8004662:	3503      	adds	r5, #3
 8004664:	1a6d      	subs	r5, r5, r1
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	4629      	mov	r1, r5
 8004674:	4638      	mov	r0, r7
 8004676:	f7ff ffa5 	bl	80045c4 <sbrk_aligned>
 800467a:	3001      	adds	r0, #1
 800467c:	d02b      	beq.n	80046d6 <_malloc_r+0xd2>
 800467e:	6823      	ldr	r3, [r4, #0]
 8004680:	442b      	add	r3, r5
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	e00e      	b.n	80046a4 <_malloc_r+0xa0>
 8004686:	6822      	ldr	r2, [r4, #0]
 8004688:	1b52      	subs	r2, r2, r5
 800468a:	d41e      	bmi.n	80046ca <_malloc_r+0xc6>
 800468c:	2a0b      	cmp	r2, #11
 800468e:	d916      	bls.n	80046be <_malloc_r+0xba>
 8004690:	1961      	adds	r1, r4, r5
 8004692:	42a3      	cmp	r3, r4
 8004694:	6025      	str	r5, [r4, #0]
 8004696:	bf18      	it	ne
 8004698:	6059      	strne	r1, [r3, #4]
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	bf08      	it	eq
 800469e:	6031      	streq	r1, [r6, #0]
 80046a0:	5162      	str	r2, [r4, r5]
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	4638      	mov	r0, r7
 80046a6:	f104 060b 	add.w	r6, r4, #11
 80046aa:	f000 fd83 	bl	80051b4 <__malloc_unlock>
 80046ae:	f026 0607 	bic.w	r6, r6, #7
 80046b2:	1d23      	adds	r3, r4, #4
 80046b4:	1af2      	subs	r2, r6, r3
 80046b6:	d0b6      	beq.n	8004626 <_malloc_r+0x22>
 80046b8:	1b9b      	subs	r3, r3, r6
 80046ba:	50a3      	str	r3, [r4, r2]
 80046bc:	e7b3      	b.n	8004626 <_malloc_r+0x22>
 80046be:	6862      	ldr	r2, [r4, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	bf0c      	ite	eq
 80046c4:	6032      	streq	r2, [r6, #0]
 80046c6:	605a      	strne	r2, [r3, #4]
 80046c8:	e7ec      	b.n	80046a4 <_malloc_r+0xa0>
 80046ca:	4623      	mov	r3, r4
 80046cc:	6864      	ldr	r4, [r4, #4]
 80046ce:	e7b2      	b.n	8004636 <_malloc_r+0x32>
 80046d0:	4634      	mov	r4, r6
 80046d2:	6876      	ldr	r6, [r6, #4]
 80046d4:	e7b9      	b.n	800464a <_malloc_r+0x46>
 80046d6:	230c      	movs	r3, #12
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4638      	mov	r0, r7
 80046dc:	f000 fd6a 	bl	80051b4 <__malloc_unlock>
 80046e0:	e7a1      	b.n	8004626 <_malloc_r+0x22>
 80046e2:	6025      	str	r5, [r4, #0]
 80046e4:	e7de      	b.n	80046a4 <_malloc_r+0xa0>
 80046e6:	bf00      	nop
 80046e8:	20000268 	.word	0x20000268

080046ec <__sfputc_r>:
 80046ec:	6893      	ldr	r3, [r2, #8]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	b410      	push	{r4}
 80046f4:	6093      	str	r3, [r2, #8]
 80046f6:	da08      	bge.n	800470a <__sfputc_r+0x1e>
 80046f8:	6994      	ldr	r4, [r2, #24]
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	db01      	blt.n	8004702 <__sfputc_r+0x16>
 80046fe:	290a      	cmp	r1, #10
 8004700:	d103      	bne.n	800470a <__sfputc_r+0x1e>
 8004702:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004706:	f000 bb33 	b.w	8004d70 <__swbuf_r>
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	1c58      	adds	r0, r3, #1
 800470e:	6010      	str	r0, [r2, #0]
 8004710:	7019      	strb	r1, [r3, #0]
 8004712:	4608      	mov	r0, r1
 8004714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004718:	4770      	bx	lr

0800471a <__sfputs_r>:
 800471a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471c:	4606      	mov	r6, r0
 800471e:	460f      	mov	r7, r1
 8004720:	4614      	mov	r4, r2
 8004722:	18d5      	adds	r5, r2, r3
 8004724:	42ac      	cmp	r4, r5
 8004726:	d101      	bne.n	800472c <__sfputs_r+0x12>
 8004728:	2000      	movs	r0, #0
 800472a:	e007      	b.n	800473c <__sfputs_r+0x22>
 800472c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004730:	463a      	mov	r2, r7
 8004732:	4630      	mov	r0, r6
 8004734:	f7ff ffda 	bl	80046ec <__sfputc_r>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d1f3      	bne.n	8004724 <__sfputs_r+0xa>
 800473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004740 <_vfiprintf_r>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	460d      	mov	r5, r1
 8004746:	b09d      	sub	sp, #116	; 0x74
 8004748:	4614      	mov	r4, r2
 800474a:	4698      	mov	r8, r3
 800474c:	4606      	mov	r6, r0
 800474e:	b118      	cbz	r0, 8004758 <_vfiprintf_r+0x18>
 8004750:	6983      	ldr	r3, [r0, #24]
 8004752:	b90b      	cbnz	r3, 8004758 <_vfiprintf_r+0x18>
 8004754:	f7ff fe96 	bl	8004484 <__sinit>
 8004758:	4b89      	ldr	r3, [pc, #548]	; (8004980 <_vfiprintf_r+0x240>)
 800475a:	429d      	cmp	r5, r3
 800475c:	d11b      	bne.n	8004796 <_vfiprintf_r+0x56>
 800475e:	6875      	ldr	r5, [r6, #4]
 8004760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004762:	07d9      	lsls	r1, r3, #31
 8004764:	d405      	bmi.n	8004772 <_vfiprintf_r+0x32>
 8004766:	89ab      	ldrh	r3, [r5, #12]
 8004768:	059a      	lsls	r2, r3, #22
 800476a:	d402      	bmi.n	8004772 <_vfiprintf_r+0x32>
 800476c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800476e:	f7ff ff27 	bl	80045c0 <__retarget_lock_acquire_recursive>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	071b      	lsls	r3, r3, #28
 8004776:	d501      	bpl.n	800477c <_vfiprintf_r+0x3c>
 8004778:	692b      	ldr	r3, [r5, #16]
 800477a:	b9eb      	cbnz	r3, 80047b8 <_vfiprintf_r+0x78>
 800477c:	4629      	mov	r1, r5
 800477e:	4630      	mov	r0, r6
 8004780:	f000 fb5a 	bl	8004e38 <__swsetup_r>
 8004784:	b1c0      	cbz	r0, 80047b8 <_vfiprintf_r+0x78>
 8004786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004788:	07dc      	lsls	r4, r3, #31
 800478a:	d50e      	bpl.n	80047aa <_vfiprintf_r+0x6a>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	b01d      	add	sp, #116	; 0x74
 8004792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <_vfiprintf_r+0x244>)
 8004798:	429d      	cmp	r5, r3
 800479a:	d101      	bne.n	80047a0 <_vfiprintf_r+0x60>
 800479c:	68b5      	ldr	r5, [r6, #8]
 800479e:	e7df      	b.n	8004760 <_vfiprintf_r+0x20>
 80047a0:	4b79      	ldr	r3, [pc, #484]	; (8004988 <_vfiprintf_r+0x248>)
 80047a2:	429d      	cmp	r5, r3
 80047a4:	bf08      	it	eq
 80047a6:	68f5      	ldreq	r5, [r6, #12]
 80047a8:	e7da      	b.n	8004760 <_vfiprintf_r+0x20>
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	0598      	lsls	r0, r3, #22
 80047ae:	d4ed      	bmi.n	800478c <_vfiprintf_r+0x4c>
 80047b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047b2:	f7ff ff06 	bl	80045c2 <__retarget_lock_release_recursive>
 80047b6:	e7e9      	b.n	800478c <_vfiprintf_r+0x4c>
 80047b8:	2300      	movs	r3, #0
 80047ba:	9309      	str	r3, [sp, #36]	; 0x24
 80047bc:	2320      	movs	r3, #32
 80047be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047c6:	2330      	movs	r3, #48	; 0x30
 80047c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800498c <_vfiprintf_r+0x24c>
 80047cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d0:	f04f 0901 	mov.w	r9, #1
 80047d4:	4623      	mov	r3, r4
 80047d6:	469a      	mov	sl, r3
 80047d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047dc:	b10a      	cbz	r2, 80047e2 <_vfiprintf_r+0xa2>
 80047de:	2a25      	cmp	r2, #37	; 0x25
 80047e0:	d1f9      	bne.n	80047d6 <_vfiprintf_r+0x96>
 80047e2:	ebba 0b04 	subs.w	fp, sl, r4
 80047e6:	d00b      	beq.n	8004800 <_vfiprintf_r+0xc0>
 80047e8:	465b      	mov	r3, fp
 80047ea:	4622      	mov	r2, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7ff ff93 	bl	800471a <__sfputs_r>
 80047f4:	3001      	adds	r0, #1
 80047f6:	f000 80aa 	beq.w	800494e <_vfiprintf_r+0x20e>
 80047fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047fc:	445a      	add	r2, fp
 80047fe:	9209      	str	r2, [sp, #36]	; 0x24
 8004800:	f89a 3000 	ldrb.w	r3, [sl]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a2 	beq.w	800494e <_vfiprintf_r+0x20e>
 800480a:	2300      	movs	r3, #0
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004814:	f10a 0a01 	add.w	sl, sl, #1
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	9307      	str	r3, [sp, #28]
 800481c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004820:	931a      	str	r3, [sp, #104]	; 0x68
 8004822:	4654      	mov	r4, sl
 8004824:	2205      	movs	r2, #5
 8004826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800482a:	4858      	ldr	r0, [pc, #352]	; (800498c <_vfiprintf_r+0x24c>)
 800482c:	f7fb fcd0 	bl	80001d0 <memchr>
 8004830:	9a04      	ldr	r2, [sp, #16]
 8004832:	b9d8      	cbnz	r0, 800486c <_vfiprintf_r+0x12c>
 8004834:	06d1      	lsls	r1, r2, #27
 8004836:	bf44      	itt	mi
 8004838:	2320      	movmi	r3, #32
 800483a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483e:	0713      	lsls	r3, r2, #28
 8004840:	bf44      	itt	mi
 8004842:	232b      	movmi	r3, #43	; 0x2b
 8004844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004848:	f89a 3000 	ldrb.w	r3, [sl]
 800484c:	2b2a      	cmp	r3, #42	; 0x2a
 800484e:	d015      	beq.n	800487c <_vfiprintf_r+0x13c>
 8004850:	9a07      	ldr	r2, [sp, #28]
 8004852:	4654      	mov	r4, sl
 8004854:	2000      	movs	r0, #0
 8004856:	f04f 0c0a 	mov.w	ip, #10
 800485a:	4621      	mov	r1, r4
 800485c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004860:	3b30      	subs	r3, #48	; 0x30
 8004862:	2b09      	cmp	r3, #9
 8004864:	d94e      	bls.n	8004904 <_vfiprintf_r+0x1c4>
 8004866:	b1b0      	cbz	r0, 8004896 <_vfiprintf_r+0x156>
 8004868:	9207      	str	r2, [sp, #28]
 800486a:	e014      	b.n	8004896 <_vfiprintf_r+0x156>
 800486c:	eba0 0308 	sub.w	r3, r0, r8
 8004870:	fa09 f303 	lsl.w	r3, r9, r3
 8004874:	4313      	orrs	r3, r2
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	46a2      	mov	sl, r4
 800487a:	e7d2      	b.n	8004822 <_vfiprintf_r+0xe2>
 800487c:	9b03      	ldr	r3, [sp, #12]
 800487e:	1d19      	adds	r1, r3, #4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	9103      	str	r1, [sp, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	bfbb      	ittet	lt
 8004888:	425b      	neglt	r3, r3
 800488a:	f042 0202 	orrlt.w	r2, r2, #2
 800488e:	9307      	strge	r3, [sp, #28]
 8004890:	9307      	strlt	r3, [sp, #28]
 8004892:	bfb8      	it	lt
 8004894:	9204      	strlt	r2, [sp, #16]
 8004896:	7823      	ldrb	r3, [r4, #0]
 8004898:	2b2e      	cmp	r3, #46	; 0x2e
 800489a:	d10c      	bne.n	80048b6 <_vfiprintf_r+0x176>
 800489c:	7863      	ldrb	r3, [r4, #1]
 800489e:	2b2a      	cmp	r3, #42	; 0x2a
 80048a0:	d135      	bne.n	800490e <_vfiprintf_r+0x1ce>
 80048a2:	9b03      	ldr	r3, [sp, #12]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	9203      	str	r2, [sp, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	bfb8      	it	lt
 80048ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80048b2:	3402      	adds	r4, #2
 80048b4:	9305      	str	r3, [sp, #20]
 80048b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800499c <_vfiprintf_r+0x25c>
 80048ba:	7821      	ldrb	r1, [r4, #0]
 80048bc:	2203      	movs	r2, #3
 80048be:	4650      	mov	r0, sl
 80048c0:	f7fb fc86 	bl	80001d0 <memchr>
 80048c4:	b140      	cbz	r0, 80048d8 <_vfiprintf_r+0x198>
 80048c6:	2340      	movs	r3, #64	; 0x40
 80048c8:	eba0 000a 	sub.w	r0, r0, sl
 80048cc:	fa03 f000 	lsl.w	r0, r3, r0
 80048d0:	9b04      	ldr	r3, [sp, #16]
 80048d2:	4303      	orrs	r3, r0
 80048d4:	3401      	adds	r4, #1
 80048d6:	9304      	str	r3, [sp, #16]
 80048d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048dc:	482c      	ldr	r0, [pc, #176]	; (8004990 <_vfiprintf_r+0x250>)
 80048de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048e2:	2206      	movs	r2, #6
 80048e4:	f7fb fc74 	bl	80001d0 <memchr>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	d03f      	beq.n	800496c <_vfiprintf_r+0x22c>
 80048ec:	4b29      	ldr	r3, [pc, #164]	; (8004994 <_vfiprintf_r+0x254>)
 80048ee:	bb1b      	cbnz	r3, 8004938 <_vfiprintf_r+0x1f8>
 80048f0:	9b03      	ldr	r3, [sp, #12]
 80048f2:	3307      	adds	r3, #7
 80048f4:	f023 0307 	bic.w	r3, r3, #7
 80048f8:	3308      	adds	r3, #8
 80048fa:	9303      	str	r3, [sp, #12]
 80048fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048fe:	443b      	add	r3, r7
 8004900:	9309      	str	r3, [sp, #36]	; 0x24
 8004902:	e767      	b.n	80047d4 <_vfiprintf_r+0x94>
 8004904:	fb0c 3202 	mla	r2, ip, r2, r3
 8004908:	460c      	mov	r4, r1
 800490a:	2001      	movs	r0, #1
 800490c:	e7a5      	b.n	800485a <_vfiprintf_r+0x11a>
 800490e:	2300      	movs	r3, #0
 8004910:	3401      	adds	r4, #1
 8004912:	9305      	str	r3, [sp, #20]
 8004914:	4619      	mov	r1, r3
 8004916:	f04f 0c0a 	mov.w	ip, #10
 800491a:	4620      	mov	r0, r4
 800491c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004920:	3a30      	subs	r2, #48	; 0x30
 8004922:	2a09      	cmp	r2, #9
 8004924:	d903      	bls.n	800492e <_vfiprintf_r+0x1ee>
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0c5      	beq.n	80048b6 <_vfiprintf_r+0x176>
 800492a:	9105      	str	r1, [sp, #20]
 800492c:	e7c3      	b.n	80048b6 <_vfiprintf_r+0x176>
 800492e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004932:	4604      	mov	r4, r0
 8004934:	2301      	movs	r3, #1
 8004936:	e7f0      	b.n	800491a <_vfiprintf_r+0x1da>
 8004938:	ab03      	add	r3, sp, #12
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	462a      	mov	r2, r5
 800493e:	4b16      	ldr	r3, [pc, #88]	; (8004998 <_vfiprintf_r+0x258>)
 8004940:	a904      	add	r1, sp, #16
 8004942:	4630      	mov	r0, r6
 8004944:	f3af 8000 	nop.w
 8004948:	4607      	mov	r7, r0
 800494a:	1c78      	adds	r0, r7, #1
 800494c:	d1d6      	bne.n	80048fc <_vfiprintf_r+0x1bc>
 800494e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004950:	07d9      	lsls	r1, r3, #31
 8004952:	d405      	bmi.n	8004960 <_vfiprintf_r+0x220>
 8004954:	89ab      	ldrh	r3, [r5, #12]
 8004956:	059a      	lsls	r2, r3, #22
 8004958:	d402      	bmi.n	8004960 <_vfiprintf_r+0x220>
 800495a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800495c:	f7ff fe31 	bl	80045c2 <__retarget_lock_release_recursive>
 8004960:	89ab      	ldrh	r3, [r5, #12]
 8004962:	065b      	lsls	r3, r3, #25
 8004964:	f53f af12 	bmi.w	800478c <_vfiprintf_r+0x4c>
 8004968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800496a:	e711      	b.n	8004790 <_vfiprintf_r+0x50>
 800496c:	ab03      	add	r3, sp, #12
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	462a      	mov	r2, r5
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <_vfiprintf_r+0x258>)
 8004974:	a904      	add	r1, sp, #16
 8004976:	4630      	mov	r0, r6
 8004978:	f000 f880 	bl	8004a7c <_printf_i>
 800497c:	e7e4      	b.n	8004948 <_vfiprintf_r+0x208>
 800497e:	bf00      	nop
 8004980:	080054a8 	.word	0x080054a8
 8004984:	080054c8 	.word	0x080054c8
 8004988:	08005488 	.word	0x08005488
 800498c:	080054e8 	.word	0x080054e8
 8004990:	080054f2 	.word	0x080054f2
 8004994:	00000000 	.word	0x00000000
 8004998:	0800471b 	.word	0x0800471b
 800499c:	080054ee 	.word	0x080054ee

080049a0 <_printf_common>:
 80049a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049a4:	4616      	mov	r6, r2
 80049a6:	4699      	mov	r9, r3
 80049a8:	688a      	ldr	r2, [r1, #8]
 80049aa:	690b      	ldr	r3, [r1, #16]
 80049ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bfb8      	it	lt
 80049b4:	4613      	movlt	r3, r2
 80049b6:	6033      	str	r3, [r6, #0]
 80049b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049bc:	4607      	mov	r7, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b10a      	cbz	r2, 80049c6 <_printf_common+0x26>
 80049c2:	3301      	adds	r3, #1
 80049c4:	6033      	str	r3, [r6, #0]
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	0699      	lsls	r1, r3, #26
 80049ca:	bf42      	ittt	mi
 80049cc:	6833      	ldrmi	r3, [r6, #0]
 80049ce:	3302      	addmi	r3, #2
 80049d0:	6033      	strmi	r3, [r6, #0]
 80049d2:	6825      	ldr	r5, [r4, #0]
 80049d4:	f015 0506 	ands.w	r5, r5, #6
 80049d8:	d106      	bne.n	80049e8 <_printf_common+0x48>
 80049da:	f104 0a19 	add.w	sl, r4, #25
 80049de:	68e3      	ldr	r3, [r4, #12]
 80049e0:	6832      	ldr	r2, [r6, #0]
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	42ab      	cmp	r3, r5
 80049e6:	dc26      	bgt.n	8004a36 <_printf_common+0x96>
 80049e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049ec:	1e13      	subs	r3, r2, #0
 80049ee:	6822      	ldr	r2, [r4, #0]
 80049f0:	bf18      	it	ne
 80049f2:	2301      	movne	r3, #1
 80049f4:	0692      	lsls	r2, r2, #26
 80049f6:	d42b      	bmi.n	8004a50 <_printf_common+0xb0>
 80049f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049fc:	4649      	mov	r1, r9
 80049fe:	4638      	mov	r0, r7
 8004a00:	47c0      	blx	r8
 8004a02:	3001      	adds	r0, #1
 8004a04:	d01e      	beq.n	8004a44 <_printf_common+0xa4>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	68e5      	ldr	r5, [r4, #12]
 8004a0a:	6832      	ldr	r2, [r6, #0]
 8004a0c:	f003 0306 	and.w	r3, r3, #6
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	bf08      	it	eq
 8004a14:	1aad      	subeq	r5, r5, r2
 8004a16:	68a3      	ldr	r3, [r4, #8]
 8004a18:	6922      	ldr	r2, [r4, #16]
 8004a1a:	bf0c      	ite	eq
 8004a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a20:	2500      	movne	r5, #0
 8004a22:	4293      	cmp	r3, r2
 8004a24:	bfc4      	itt	gt
 8004a26:	1a9b      	subgt	r3, r3, r2
 8004a28:	18ed      	addgt	r5, r5, r3
 8004a2a:	2600      	movs	r6, #0
 8004a2c:	341a      	adds	r4, #26
 8004a2e:	42b5      	cmp	r5, r6
 8004a30:	d11a      	bne.n	8004a68 <_printf_common+0xc8>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e008      	b.n	8004a48 <_printf_common+0xa8>
 8004a36:	2301      	movs	r3, #1
 8004a38:	4652      	mov	r2, sl
 8004a3a:	4649      	mov	r1, r9
 8004a3c:	4638      	mov	r0, r7
 8004a3e:	47c0      	blx	r8
 8004a40:	3001      	adds	r0, #1
 8004a42:	d103      	bne.n	8004a4c <_printf_common+0xac>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4c:	3501      	adds	r5, #1
 8004a4e:	e7c6      	b.n	80049de <_printf_common+0x3e>
 8004a50:	18e1      	adds	r1, r4, r3
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	2030      	movs	r0, #48	; 0x30
 8004a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a5a:	4422      	add	r2, r4
 8004a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a64:	3302      	adds	r3, #2
 8004a66:	e7c7      	b.n	80049f8 <_printf_common+0x58>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	4649      	mov	r1, r9
 8004a6e:	4638      	mov	r0, r7
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d0e6      	beq.n	8004a44 <_printf_common+0xa4>
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7d9      	b.n	8004a2e <_printf_common+0x8e>
	...

08004a7c <_printf_i>:
 8004a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	7e0f      	ldrb	r7, [r1, #24]
 8004a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a84:	2f78      	cmp	r7, #120	; 0x78
 8004a86:	4691      	mov	r9, r2
 8004a88:	4680      	mov	r8, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	469a      	mov	sl, r3
 8004a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a92:	d807      	bhi.n	8004aa4 <_printf_i+0x28>
 8004a94:	2f62      	cmp	r7, #98	; 0x62
 8004a96:	d80a      	bhi.n	8004aae <_printf_i+0x32>
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	f000 80d8 	beq.w	8004c4e <_printf_i+0x1d2>
 8004a9e:	2f58      	cmp	r7, #88	; 0x58
 8004aa0:	f000 80a3 	beq.w	8004bea <_printf_i+0x16e>
 8004aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aac:	e03a      	b.n	8004b24 <_printf_i+0xa8>
 8004aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ab2:	2b15      	cmp	r3, #21
 8004ab4:	d8f6      	bhi.n	8004aa4 <_printf_i+0x28>
 8004ab6:	a101      	add	r1, pc, #4	; (adr r1, 8004abc <_printf_i+0x40>)
 8004ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004abc:	08004b15 	.word	0x08004b15
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004aa5 	.word	0x08004aa5
 8004ac8:	08004aa5 	.word	0x08004aa5
 8004acc:	08004aa5 	.word	0x08004aa5
 8004ad0:	08004aa5 	.word	0x08004aa5
 8004ad4:	08004b29 	.word	0x08004b29
 8004ad8:	08004aa5 	.word	0x08004aa5
 8004adc:	08004aa5 	.word	0x08004aa5
 8004ae0:	08004aa5 	.word	0x08004aa5
 8004ae4:	08004aa5 	.word	0x08004aa5
 8004ae8:	08004c35 	.word	0x08004c35
 8004aec:	08004b59 	.word	0x08004b59
 8004af0:	08004c17 	.word	0x08004c17
 8004af4:	08004aa5 	.word	0x08004aa5
 8004af8:	08004aa5 	.word	0x08004aa5
 8004afc:	08004c57 	.word	0x08004c57
 8004b00:	08004aa5 	.word	0x08004aa5
 8004b04:	08004b59 	.word	0x08004b59
 8004b08:	08004aa5 	.word	0x08004aa5
 8004b0c:	08004aa5 	.word	0x08004aa5
 8004b10:	08004c1f 	.word	0x08004c1f
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	1d1a      	adds	r2, r3, #4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	602a      	str	r2, [r5, #0]
 8004b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0a3      	b.n	8004c70 <_printf_i+0x1f4>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	6829      	ldr	r1, [r5, #0]
 8004b2c:	0606      	lsls	r6, r0, #24
 8004b2e:	f101 0304 	add.w	r3, r1, #4
 8004b32:	d50a      	bpl.n	8004b4a <_printf_i+0xce>
 8004b34:	680e      	ldr	r6, [r1, #0]
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	2e00      	cmp	r6, #0
 8004b3a:	da03      	bge.n	8004b44 <_printf_i+0xc8>
 8004b3c:	232d      	movs	r3, #45	; 0x2d
 8004b3e:	4276      	negs	r6, r6
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b44:	485e      	ldr	r0, [pc, #376]	; (8004cc0 <_printf_i+0x244>)
 8004b46:	230a      	movs	r3, #10
 8004b48:	e019      	b.n	8004b7e <_printf_i+0x102>
 8004b4a:	680e      	ldr	r6, [r1, #0]
 8004b4c:	602b      	str	r3, [r5, #0]
 8004b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b52:	bf18      	it	ne
 8004b54:	b236      	sxthne	r6, r6
 8004b56:	e7ef      	b.n	8004b38 <_printf_i+0xbc>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	6820      	ldr	r0, [r4, #0]
 8004b5c:	1d19      	adds	r1, r3, #4
 8004b5e:	6029      	str	r1, [r5, #0]
 8004b60:	0601      	lsls	r1, r0, #24
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0xec>
 8004b64:	681e      	ldr	r6, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0xf2>
 8004b68:	0646      	lsls	r6, r0, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0xe8>
 8004b6c:	881e      	ldrh	r6, [r3, #0]
 8004b6e:	4854      	ldr	r0, [pc, #336]	; (8004cc0 <_printf_i+0x244>)
 8004b70:	2f6f      	cmp	r7, #111	; 0x6f
 8004b72:	bf0c      	ite	eq
 8004b74:	2308      	moveq	r3, #8
 8004b76:	230a      	movne	r3, #10
 8004b78:	2100      	movs	r1, #0
 8004b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b7e:	6865      	ldr	r5, [r4, #4]
 8004b80:	60a5      	str	r5, [r4, #8]
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	bfa2      	ittt	ge
 8004b86:	6821      	ldrge	r1, [r4, #0]
 8004b88:	f021 0104 	bicge.w	r1, r1, #4
 8004b8c:	6021      	strge	r1, [r4, #0]
 8004b8e:	b90e      	cbnz	r6, 8004b94 <_printf_i+0x118>
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	d04d      	beq.n	8004c30 <_printf_i+0x1b4>
 8004b94:	4615      	mov	r5, r2
 8004b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8004b9e:	5dc7      	ldrb	r7, [r0, r7]
 8004ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ba4:	4637      	mov	r7, r6
 8004ba6:	42bb      	cmp	r3, r7
 8004ba8:	460e      	mov	r6, r1
 8004baa:	d9f4      	bls.n	8004b96 <_printf_i+0x11a>
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d10b      	bne.n	8004bc8 <_printf_i+0x14c>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	07de      	lsls	r6, r3, #31
 8004bb4:	d508      	bpl.n	8004bc8 <_printf_i+0x14c>
 8004bb6:	6923      	ldr	r3, [r4, #16]
 8004bb8:	6861      	ldr	r1, [r4, #4]
 8004bba:	4299      	cmp	r1, r3
 8004bbc:	bfde      	ittt	le
 8004bbe:	2330      	movle	r3, #48	; 0x30
 8004bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bc8:	1b52      	subs	r2, r2, r5
 8004bca:	6122      	str	r2, [r4, #16]
 8004bcc:	f8cd a000 	str.w	sl, [sp]
 8004bd0:	464b      	mov	r3, r9
 8004bd2:	aa03      	add	r2, sp, #12
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	f7ff fee2 	bl	80049a0 <_printf_common>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d14c      	bne.n	8004c7a <_printf_i+0x1fe>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	b004      	add	sp, #16
 8004be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bea:	4835      	ldr	r0, [pc, #212]	; (8004cc0 <_printf_i+0x244>)
 8004bec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bf0:	6829      	ldr	r1, [r5, #0]
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bf8:	6029      	str	r1, [r5, #0]
 8004bfa:	061d      	lsls	r5, r3, #24
 8004bfc:	d514      	bpl.n	8004c28 <_printf_i+0x1ac>
 8004bfe:	07df      	lsls	r7, r3, #31
 8004c00:	bf44      	itt	mi
 8004c02:	f043 0320 	orrmi.w	r3, r3, #32
 8004c06:	6023      	strmi	r3, [r4, #0]
 8004c08:	b91e      	cbnz	r6, 8004c12 <_printf_i+0x196>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	f023 0320 	bic.w	r3, r3, #32
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	2310      	movs	r3, #16
 8004c14:	e7b0      	b.n	8004b78 <_printf_i+0xfc>
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	f043 0320 	orr.w	r3, r3, #32
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	2378      	movs	r3, #120	; 0x78
 8004c20:	4828      	ldr	r0, [pc, #160]	; (8004cc4 <_printf_i+0x248>)
 8004c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c26:	e7e3      	b.n	8004bf0 <_printf_i+0x174>
 8004c28:	0659      	lsls	r1, r3, #25
 8004c2a:	bf48      	it	mi
 8004c2c:	b2b6      	uxthmi	r6, r6
 8004c2e:	e7e6      	b.n	8004bfe <_printf_i+0x182>
 8004c30:	4615      	mov	r5, r2
 8004c32:	e7bb      	b.n	8004bac <_printf_i+0x130>
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	6826      	ldr	r6, [r4, #0]
 8004c38:	6961      	ldr	r1, [r4, #20]
 8004c3a:	1d18      	adds	r0, r3, #4
 8004c3c:	6028      	str	r0, [r5, #0]
 8004c3e:	0635      	lsls	r5, r6, #24
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	d501      	bpl.n	8004c48 <_printf_i+0x1cc>
 8004c44:	6019      	str	r1, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <_printf_i+0x1d2>
 8004c48:	0670      	lsls	r0, r6, #25
 8004c4a:	d5fb      	bpl.n	8004c44 <_printf_i+0x1c8>
 8004c4c:	8019      	strh	r1, [r3, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6123      	str	r3, [r4, #16]
 8004c52:	4615      	mov	r5, r2
 8004c54:	e7ba      	b.n	8004bcc <_printf_i+0x150>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	1d1a      	adds	r2, r3, #4
 8004c5a:	602a      	str	r2, [r5, #0]
 8004c5c:	681d      	ldr	r5, [r3, #0]
 8004c5e:	6862      	ldr	r2, [r4, #4]
 8004c60:	2100      	movs	r1, #0
 8004c62:	4628      	mov	r0, r5
 8004c64:	f7fb fab4 	bl	80001d0 <memchr>
 8004c68:	b108      	cbz	r0, 8004c6e <_printf_i+0x1f2>
 8004c6a:	1b40      	subs	r0, r0, r5
 8004c6c:	6060      	str	r0, [r4, #4]
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	6123      	str	r3, [r4, #16]
 8004c72:	2300      	movs	r3, #0
 8004c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c78:	e7a8      	b.n	8004bcc <_printf_i+0x150>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	462a      	mov	r2, r5
 8004c7e:	4649      	mov	r1, r9
 8004c80:	4640      	mov	r0, r8
 8004c82:	47d0      	blx	sl
 8004c84:	3001      	adds	r0, #1
 8004c86:	d0ab      	beq.n	8004be0 <_printf_i+0x164>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	079b      	lsls	r3, r3, #30
 8004c8c:	d413      	bmi.n	8004cb6 <_printf_i+0x23a>
 8004c8e:	68e0      	ldr	r0, [r4, #12]
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	4298      	cmp	r0, r3
 8004c94:	bfb8      	it	lt
 8004c96:	4618      	movlt	r0, r3
 8004c98:	e7a4      	b.n	8004be4 <_printf_i+0x168>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	47d0      	blx	sl
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d09b      	beq.n	8004be0 <_printf_i+0x164>
 8004ca8:	3501      	adds	r5, #1
 8004caa:	68e3      	ldr	r3, [r4, #12]
 8004cac:	9903      	ldr	r1, [sp, #12]
 8004cae:	1a5b      	subs	r3, r3, r1
 8004cb0:	42ab      	cmp	r3, r5
 8004cb2:	dcf2      	bgt.n	8004c9a <_printf_i+0x21e>
 8004cb4:	e7eb      	b.n	8004c8e <_printf_i+0x212>
 8004cb6:	2500      	movs	r5, #0
 8004cb8:	f104 0619 	add.w	r6, r4, #25
 8004cbc:	e7f5      	b.n	8004caa <_printf_i+0x22e>
 8004cbe:	bf00      	nop
 8004cc0:	080054f9 	.word	0x080054f9
 8004cc4:	0800550a 	.word	0x0800550a

08004cc8 <_sbrk_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4d06      	ldr	r5, [pc, #24]	; (8004ce4 <_sbrk_r+0x1c>)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4608      	mov	r0, r1
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	f7fc fcc6 	bl	8001664 <_sbrk>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_sbrk_r+0x1a>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_sbrk_r+0x1a>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000270 	.word	0x20000270

08004ce8 <__sread>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	460c      	mov	r4, r1
 8004cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cf0:	f000 fab2 	bl	8005258 <_read_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	bfab      	itete	ge
 8004cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8004cfc:	181b      	addge	r3, r3, r0
 8004cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d02:	bfac      	ite	ge
 8004d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d06:	81a3      	strhlt	r3, [r4, #12]
 8004d08:	bd10      	pop	{r4, pc}

08004d0a <__swrite>:
 8004d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d0e:	461f      	mov	r7, r3
 8004d10:	898b      	ldrh	r3, [r1, #12]
 8004d12:	05db      	lsls	r3, r3, #23
 8004d14:	4605      	mov	r5, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	4616      	mov	r6, r2
 8004d1a:	d505      	bpl.n	8004d28 <__swrite+0x1e>
 8004d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d20:	2302      	movs	r3, #2
 8004d22:	2200      	movs	r2, #0
 8004d24:	f000 f9c8 	bl	80050b8 <_lseek_r>
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d32:	81a3      	strh	r3, [r4, #12]
 8004d34:	4632      	mov	r2, r6
 8004d36:	463b      	mov	r3, r7
 8004d38:	4628      	mov	r0, r5
 8004d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d3e:	f000 b869 	b.w	8004e14 <_write_r>

08004d42 <__sseek>:
 8004d42:	b510      	push	{r4, lr}
 8004d44:	460c      	mov	r4, r1
 8004d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d4a:	f000 f9b5 	bl	80050b8 <_lseek_r>
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	bf15      	itete	ne
 8004d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d5e:	81a3      	strheq	r3, [r4, #12]
 8004d60:	bf18      	it	ne
 8004d62:	81a3      	strhne	r3, [r4, #12]
 8004d64:	bd10      	pop	{r4, pc}

08004d66 <__sclose>:
 8004d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6a:	f000 b8d3 	b.w	8004f14 <_close_r>
	...

08004d70 <__swbuf_r>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	460e      	mov	r6, r1
 8004d74:	4614      	mov	r4, r2
 8004d76:	4605      	mov	r5, r0
 8004d78:	b118      	cbz	r0, 8004d82 <__swbuf_r+0x12>
 8004d7a:	6983      	ldr	r3, [r0, #24]
 8004d7c:	b90b      	cbnz	r3, 8004d82 <__swbuf_r+0x12>
 8004d7e:	f7ff fb81 	bl	8004484 <__sinit>
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <__swbuf_r+0x98>)
 8004d84:	429c      	cmp	r4, r3
 8004d86:	d12b      	bne.n	8004de0 <__swbuf_r+0x70>
 8004d88:	686c      	ldr	r4, [r5, #4]
 8004d8a:	69a3      	ldr	r3, [r4, #24]
 8004d8c:	60a3      	str	r3, [r4, #8]
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	071a      	lsls	r2, r3, #28
 8004d92:	d52f      	bpl.n	8004df4 <__swbuf_r+0x84>
 8004d94:	6923      	ldr	r3, [r4, #16]
 8004d96:	b36b      	cbz	r3, 8004df4 <__swbuf_r+0x84>
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	6820      	ldr	r0, [r4, #0]
 8004d9c:	1ac0      	subs	r0, r0, r3
 8004d9e:	6963      	ldr	r3, [r4, #20]
 8004da0:	b2f6      	uxtb	r6, r6
 8004da2:	4283      	cmp	r3, r0
 8004da4:	4637      	mov	r7, r6
 8004da6:	dc04      	bgt.n	8004db2 <__swbuf_r+0x42>
 8004da8:	4621      	mov	r1, r4
 8004daa:	4628      	mov	r0, r5
 8004dac:	f000 f948 	bl	8005040 <_fflush_r>
 8004db0:	bb30      	cbnz	r0, 8004e00 <__swbuf_r+0x90>
 8004db2:	68a3      	ldr	r3, [r4, #8]
 8004db4:	3b01      	subs	r3, #1
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	6022      	str	r2, [r4, #0]
 8004dbe:	701e      	strb	r6, [r3, #0]
 8004dc0:	6963      	ldr	r3, [r4, #20]
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	4283      	cmp	r3, r0
 8004dc6:	d004      	beq.n	8004dd2 <__swbuf_r+0x62>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	07db      	lsls	r3, r3, #31
 8004dcc:	d506      	bpl.n	8004ddc <__swbuf_r+0x6c>
 8004dce:	2e0a      	cmp	r6, #10
 8004dd0:	d104      	bne.n	8004ddc <__swbuf_r+0x6c>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 f933 	bl	8005040 <_fflush_r>
 8004dda:	b988      	cbnz	r0, 8004e00 <__swbuf_r+0x90>
 8004ddc:	4638      	mov	r0, r7
 8004dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de0:	4b0a      	ldr	r3, [pc, #40]	; (8004e0c <__swbuf_r+0x9c>)
 8004de2:	429c      	cmp	r4, r3
 8004de4:	d101      	bne.n	8004dea <__swbuf_r+0x7a>
 8004de6:	68ac      	ldr	r4, [r5, #8]
 8004de8:	e7cf      	b.n	8004d8a <__swbuf_r+0x1a>
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <__swbuf_r+0xa0>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	bf08      	it	eq
 8004df0:	68ec      	ldreq	r4, [r5, #12]
 8004df2:	e7ca      	b.n	8004d8a <__swbuf_r+0x1a>
 8004df4:	4621      	mov	r1, r4
 8004df6:	4628      	mov	r0, r5
 8004df8:	f000 f81e 	bl	8004e38 <__swsetup_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d0cb      	beq.n	8004d98 <__swbuf_r+0x28>
 8004e00:	f04f 37ff 	mov.w	r7, #4294967295
 8004e04:	e7ea      	b.n	8004ddc <__swbuf_r+0x6c>
 8004e06:	bf00      	nop
 8004e08:	080054a8 	.word	0x080054a8
 8004e0c:	080054c8 	.word	0x080054c8
 8004e10:	08005488 	.word	0x08005488

08004e14 <_write_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	; (8004e34 <_write_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc fbce 	bl	80015c4 <_write>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_write_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_write_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20000270 	.word	0x20000270

08004e38 <__swsetup_r>:
 8004e38:	4b32      	ldr	r3, [pc, #200]	; (8004f04 <__swsetup_r+0xcc>)
 8004e3a:	b570      	push	{r4, r5, r6, lr}
 8004e3c:	681d      	ldr	r5, [r3, #0]
 8004e3e:	4606      	mov	r6, r0
 8004e40:	460c      	mov	r4, r1
 8004e42:	b125      	cbz	r5, 8004e4e <__swsetup_r+0x16>
 8004e44:	69ab      	ldr	r3, [r5, #24]
 8004e46:	b913      	cbnz	r3, 8004e4e <__swsetup_r+0x16>
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f7ff fb1b 	bl	8004484 <__sinit>
 8004e4e:	4b2e      	ldr	r3, [pc, #184]	; (8004f08 <__swsetup_r+0xd0>)
 8004e50:	429c      	cmp	r4, r3
 8004e52:	d10f      	bne.n	8004e74 <__swsetup_r+0x3c>
 8004e54:	686c      	ldr	r4, [r5, #4]
 8004e56:	89a3      	ldrh	r3, [r4, #12]
 8004e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e5c:	0719      	lsls	r1, r3, #28
 8004e5e:	d42c      	bmi.n	8004eba <__swsetup_r+0x82>
 8004e60:	06dd      	lsls	r5, r3, #27
 8004e62:	d411      	bmi.n	8004e88 <__swsetup_r+0x50>
 8004e64:	2309      	movs	r3, #9
 8004e66:	6033      	str	r3, [r6, #0]
 8004e68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e6c:	81a3      	strh	r3, [r4, #12]
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e03e      	b.n	8004ef2 <__swsetup_r+0xba>
 8004e74:	4b25      	ldr	r3, [pc, #148]	; (8004f0c <__swsetup_r+0xd4>)
 8004e76:	429c      	cmp	r4, r3
 8004e78:	d101      	bne.n	8004e7e <__swsetup_r+0x46>
 8004e7a:	68ac      	ldr	r4, [r5, #8]
 8004e7c:	e7eb      	b.n	8004e56 <__swsetup_r+0x1e>
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <__swsetup_r+0xd8>)
 8004e80:	429c      	cmp	r4, r3
 8004e82:	bf08      	it	eq
 8004e84:	68ec      	ldreq	r4, [r5, #12]
 8004e86:	e7e6      	b.n	8004e56 <__swsetup_r+0x1e>
 8004e88:	0758      	lsls	r0, r3, #29
 8004e8a:	d512      	bpl.n	8004eb2 <__swsetup_r+0x7a>
 8004e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e8e:	b141      	cbz	r1, 8004ea2 <__swsetup_r+0x6a>
 8004e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e94:	4299      	cmp	r1, r3
 8004e96:	d002      	beq.n	8004e9e <__swsetup_r+0x66>
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f991 	bl	80051c0 <_free_r>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ea8:	81a3      	strh	r3, [r4, #12]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6063      	str	r3, [r4, #4]
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	89a3      	ldrh	r3, [r4, #12]
 8004eb4:	f043 0308 	orr.w	r3, r3, #8
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	b94b      	cbnz	r3, 8004ed2 <__swsetup_r+0x9a>
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec8:	d003      	beq.n	8004ed2 <__swsetup_r+0x9a>
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4630      	mov	r0, r6
 8004ece:	f000 f92b 	bl	8005128 <__smakebuf_r>
 8004ed2:	89a0      	ldrh	r0, [r4, #12]
 8004ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed8:	f010 0301 	ands.w	r3, r0, #1
 8004edc:	d00a      	beq.n	8004ef4 <__swsetup_r+0xbc>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60a3      	str	r3, [r4, #8]
 8004ee2:	6963      	ldr	r3, [r4, #20]
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	61a3      	str	r3, [r4, #24]
 8004ee8:	6923      	ldr	r3, [r4, #16]
 8004eea:	b943      	cbnz	r3, 8004efe <__swsetup_r+0xc6>
 8004eec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ef0:	d1ba      	bne.n	8004e68 <__swsetup_r+0x30>
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	0781      	lsls	r1, r0, #30
 8004ef6:	bf58      	it	pl
 8004ef8:	6963      	ldrpl	r3, [r4, #20]
 8004efa:	60a3      	str	r3, [r4, #8]
 8004efc:	e7f4      	b.n	8004ee8 <__swsetup_r+0xb0>
 8004efe:	2000      	movs	r0, #0
 8004f00:	e7f7      	b.n	8004ef2 <__swsetup_r+0xba>
 8004f02:	bf00      	nop
 8004f04:	20000010 	.word	0x20000010
 8004f08:	080054a8 	.word	0x080054a8
 8004f0c:	080054c8 	.word	0x080054c8
 8004f10:	08005488 	.word	0x08005488

08004f14 <_close_r>:
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4d06      	ldr	r5, [pc, #24]	; (8004f30 <_close_r+0x1c>)
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	4608      	mov	r0, r1
 8004f1e:	602b      	str	r3, [r5, #0]
 8004f20:	f7fc fb6c 	bl	80015fc <_close>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_close_r+0x1a>
 8004f28:	682b      	ldr	r3, [r5, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_close_r+0x1a>
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	20000270 	.word	0x20000270

08004f34 <__sflush_r>:
 8004f34:	898a      	ldrh	r2, [r1, #12]
 8004f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	0710      	lsls	r0, r2, #28
 8004f3e:	460c      	mov	r4, r1
 8004f40:	d458      	bmi.n	8004ff4 <__sflush_r+0xc0>
 8004f42:	684b      	ldr	r3, [r1, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	dc05      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	dc02      	bgt.n	8004f54 <__sflush_r+0x20>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	d0f9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f60:	682f      	ldr	r7, [r5, #0]
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	d032      	beq.n	8004fcc <__sflush_r+0x98>
 8004f66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	075a      	lsls	r2, r3, #29
 8004f6c:	d505      	bpl.n	8004f7a <__sflush_r+0x46>
 8004f6e:	6863      	ldr	r3, [r4, #4]
 8004f70:	1ac0      	subs	r0, r0, r3
 8004f72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f74:	b10b      	cbz	r3, 8004f7a <__sflush_r+0x46>
 8004f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f78:	1ac0      	subs	r0, r0, r3
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f80:	6a21      	ldr	r1, [r4, #32]
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b0      	blx	r6
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	89a3      	ldrh	r3, [r4, #12]
 8004f8a:	d106      	bne.n	8004f9a <__sflush_r+0x66>
 8004f8c:	6829      	ldr	r1, [r5, #0]
 8004f8e:	291d      	cmp	r1, #29
 8004f90:	d82c      	bhi.n	8004fec <__sflush_r+0xb8>
 8004f92:	4a2a      	ldr	r2, [pc, #168]	; (800503c <__sflush_r+0x108>)
 8004f94:	40ca      	lsrs	r2, r1
 8004f96:	07d6      	lsls	r6, r2, #31
 8004f98:	d528      	bpl.n	8004fec <__sflush_r+0xb8>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6062      	str	r2, [r4, #4]
 8004f9e:	04d9      	lsls	r1, r3, #19
 8004fa0:	6922      	ldr	r2, [r4, #16]
 8004fa2:	6022      	str	r2, [r4, #0]
 8004fa4:	d504      	bpl.n	8004fb0 <__sflush_r+0x7c>
 8004fa6:	1c42      	adds	r2, r0, #1
 8004fa8:	d101      	bne.n	8004fae <__sflush_r+0x7a>
 8004faa:	682b      	ldr	r3, [r5, #0]
 8004fac:	b903      	cbnz	r3, 8004fb0 <__sflush_r+0x7c>
 8004fae:	6560      	str	r0, [r4, #84]	; 0x54
 8004fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fb2:	602f      	str	r7, [r5, #0]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d0ca      	beq.n	8004f4e <__sflush_r+0x1a>
 8004fb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fbc:	4299      	cmp	r1, r3
 8004fbe:	d002      	beq.n	8004fc6 <__sflush_r+0x92>
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f000 f8fd 	bl	80051c0 <_free_r>
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	6360      	str	r0, [r4, #52]	; 0x34
 8004fca:	e7c1      	b.n	8004f50 <__sflush_r+0x1c>
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	2301      	movs	r3, #1
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b0      	blx	r6
 8004fd4:	1c41      	adds	r1, r0, #1
 8004fd6:	d1c7      	bne.n	8004f68 <__sflush_r+0x34>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d0c4      	beq.n	8004f68 <__sflush_r+0x34>
 8004fde:	2b1d      	cmp	r3, #29
 8004fe0:	d001      	beq.n	8004fe6 <__sflush_r+0xb2>
 8004fe2:	2b16      	cmp	r3, #22
 8004fe4:	d101      	bne.n	8004fea <__sflush_r+0xb6>
 8004fe6:	602f      	str	r7, [r5, #0]
 8004fe8:	e7b1      	b.n	8004f4e <__sflush_r+0x1a>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff0:	81a3      	strh	r3, [r4, #12]
 8004ff2:	e7ad      	b.n	8004f50 <__sflush_r+0x1c>
 8004ff4:	690f      	ldr	r7, [r1, #16]
 8004ff6:	2f00      	cmp	r7, #0
 8004ff8:	d0a9      	beq.n	8004f4e <__sflush_r+0x1a>
 8004ffa:	0793      	lsls	r3, r2, #30
 8004ffc:	680e      	ldr	r6, [r1, #0]
 8004ffe:	bf08      	it	eq
 8005000:	694b      	ldreq	r3, [r1, #20]
 8005002:	600f      	str	r7, [r1, #0]
 8005004:	bf18      	it	ne
 8005006:	2300      	movne	r3, #0
 8005008:	eba6 0807 	sub.w	r8, r6, r7
 800500c:	608b      	str	r3, [r1, #8]
 800500e:	f1b8 0f00 	cmp.w	r8, #0
 8005012:	dd9c      	ble.n	8004f4e <__sflush_r+0x1a>
 8005014:	6a21      	ldr	r1, [r4, #32]
 8005016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005018:	4643      	mov	r3, r8
 800501a:	463a      	mov	r2, r7
 800501c:	4628      	mov	r0, r5
 800501e:	47b0      	blx	r6
 8005020:	2800      	cmp	r0, #0
 8005022:	dc06      	bgt.n	8005032 <__sflush_r+0xfe>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	f04f 30ff 	mov.w	r0, #4294967295
 8005030:	e78e      	b.n	8004f50 <__sflush_r+0x1c>
 8005032:	4407      	add	r7, r0
 8005034:	eba8 0800 	sub.w	r8, r8, r0
 8005038:	e7e9      	b.n	800500e <__sflush_r+0xda>
 800503a:	bf00      	nop
 800503c:	20400001 	.word	0x20400001

08005040 <_fflush_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	4605      	mov	r5, r0
 8005046:	460c      	mov	r4, r1
 8005048:	b913      	cbnz	r3, 8005050 <_fflush_r+0x10>
 800504a:	2500      	movs	r5, #0
 800504c:	4628      	mov	r0, r5
 800504e:	bd38      	pop	{r3, r4, r5, pc}
 8005050:	b118      	cbz	r0, 800505a <_fflush_r+0x1a>
 8005052:	6983      	ldr	r3, [r0, #24]
 8005054:	b90b      	cbnz	r3, 800505a <_fflush_r+0x1a>
 8005056:	f7ff fa15 	bl	8004484 <__sinit>
 800505a:	4b14      	ldr	r3, [pc, #80]	; (80050ac <_fflush_r+0x6c>)
 800505c:	429c      	cmp	r4, r3
 800505e:	d11b      	bne.n	8005098 <_fflush_r+0x58>
 8005060:	686c      	ldr	r4, [r5, #4]
 8005062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0ef      	beq.n	800504a <_fflush_r+0xa>
 800506a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800506c:	07d0      	lsls	r0, r2, #31
 800506e:	d404      	bmi.n	800507a <_fflush_r+0x3a>
 8005070:	0599      	lsls	r1, r3, #22
 8005072:	d402      	bmi.n	800507a <_fflush_r+0x3a>
 8005074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005076:	f7ff faa3 	bl	80045c0 <__retarget_lock_acquire_recursive>
 800507a:	4628      	mov	r0, r5
 800507c:	4621      	mov	r1, r4
 800507e:	f7ff ff59 	bl	8004f34 <__sflush_r>
 8005082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005084:	07da      	lsls	r2, r3, #31
 8005086:	4605      	mov	r5, r0
 8005088:	d4e0      	bmi.n	800504c <_fflush_r+0xc>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	d4dd      	bmi.n	800504c <_fflush_r+0xc>
 8005090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005092:	f7ff fa96 	bl	80045c2 <__retarget_lock_release_recursive>
 8005096:	e7d9      	b.n	800504c <_fflush_r+0xc>
 8005098:	4b05      	ldr	r3, [pc, #20]	; (80050b0 <_fflush_r+0x70>)
 800509a:	429c      	cmp	r4, r3
 800509c:	d101      	bne.n	80050a2 <_fflush_r+0x62>
 800509e:	68ac      	ldr	r4, [r5, #8]
 80050a0:	e7df      	b.n	8005062 <_fflush_r+0x22>
 80050a2:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <_fflush_r+0x74>)
 80050a4:	429c      	cmp	r4, r3
 80050a6:	bf08      	it	eq
 80050a8:	68ec      	ldreq	r4, [r5, #12]
 80050aa:	e7da      	b.n	8005062 <_fflush_r+0x22>
 80050ac:	080054a8 	.word	0x080054a8
 80050b0:	080054c8 	.word	0x080054c8
 80050b4:	08005488 	.word	0x08005488

080050b8 <_lseek_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d07      	ldr	r5, [pc, #28]	; (80050d8 <_lseek_r+0x20>)
 80050bc:	4604      	mov	r4, r0
 80050be:	4608      	mov	r0, r1
 80050c0:	4611      	mov	r1, r2
 80050c2:	2200      	movs	r2, #0
 80050c4:	602a      	str	r2, [r5, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f7fc fabf 	bl	800164a <_lseek>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	d102      	bne.n	80050d6 <_lseek_r+0x1e>
 80050d0:	682b      	ldr	r3, [r5, #0]
 80050d2:	b103      	cbz	r3, 80050d6 <_lseek_r+0x1e>
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	20000270 	.word	0x20000270

080050dc <__swhatbuf_r>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	460e      	mov	r6, r1
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	b096      	sub	sp, #88	; 0x58
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	da08      	bge.n	8005100 <__swhatbuf_r+0x24>
 80050ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	602a      	str	r2, [r5, #0]
 80050f6:	061a      	lsls	r2, r3, #24
 80050f8:	d410      	bmi.n	800511c <__swhatbuf_r+0x40>
 80050fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fe:	e00e      	b.n	800511e <__swhatbuf_r+0x42>
 8005100:	466a      	mov	r2, sp
 8005102:	f000 f8bb 	bl	800527c <_fstat_r>
 8005106:	2800      	cmp	r0, #0
 8005108:	dbf1      	blt.n	80050ee <__swhatbuf_r+0x12>
 800510a:	9a01      	ldr	r2, [sp, #4]
 800510c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005110:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005114:	425a      	negs	r2, r3
 8005116:	415a      	adcs	r2, r3
 8005118:	602a      	str	r2, [r5, #0]
 800511a:	e7ee      	b.n	80050fa <__swhatbuf_r+0x1e>
 800511c:	2340      	movs	r3, #64	; 0x40
 800511e:	2000      	movs	r0, #0
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	b016      	add	sp, #88	; 0x58
 8005124:	bd70      	pop	{r4, r5, r6, pc}
	...

08005128 <__smakebuf_r>:
 8005128:	898b      	ldrh	r3, [r1, #12]
 800512a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800512c:	079d      	lsls	r5, r3, #30
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	d507      	bpl.n	8005144 <__smakebuf_r+0x1c>
 8005134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	6123      	str	r3, [r4, #16]
 800513c:	2301      	movs	r3, #1
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	b002      	add	sp, #8
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	ab01      	add	r3, sp, #4
 8005146:	466a      	mov	r2, sp
 8005148:	f7ff ffc8 	bl	80050dc <__swhatbuf_r>
 800514c:	9900      	ldr	r1, [sp, #0]
 800514e:	4605      	mov	r5, r0
 8005150:	4630      	mov	r0, r6
 8005152:	f7ff fa57 	bl	8004604 <_malloc_r>
 8005156:	b948      	cbnz	r0, 800516c <__smakebuf_r+0x44>
 8005158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800515c:	059a      	lsls	r2, r3, #22
 800515e:	d4ef      	bmi.n	8005140 <__smakebuf_r+0x18>
 8005160:	f023 0303 	bic.w	r3, r3, #3
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	81a3      	strh	r3, [r4, #12]
 800516a:	e7e3      	b.n	8005134 <__smakebuf_r+0xc>
 800516c:	4b0d      	ldr	r3, [pc, #52]	; (80051a4 <__smakebuf_r+0x7c>)
 800516e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005170:	89a3      	ldrh	r3, [r4, #12]
 8005172:	6020      	str	r0, [r4, #0]
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	81a3      	strh	r3, [r4, #12]
 800517a:	9b00      	ldr	r3, [sp, #0]
 800517c:	6163      	str	r3, [r4, #20]
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	6120      	str	r0, [r4, #16]
 8005182:	b15b      	cbz	r3, 800519c <__smakebuf_r+0x74>
 8005184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005188:	4630      	mov	r0, r6
 800518a:	f000 f889 	bl	80052a0 <_isatty_r>
 800518e:	b128      	cbz	r0, 800519c <__smakebuf_r+0x74>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f023 0303 	bic.w	r3, r3, #3
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	89a0      	ldrh	r0, [r4, #12]
 800519e:	4305      	orrs	r5, r0
 80051a0:	81a5      	strh	r5, [r4, #12]
 80051a2:	e7cd      	b.n	8005140 <__smakebuf_r+0x18>
 80051a4:	0800441d 	.word	0x0800441d

080051a8 <__malloc_lock>:
 80051a8:	4801      	ldr	r0, [pc, #4]	; (80051b0 <__malloc_lock+0x8>)
 80051aa:	f7ff ba09 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 80051ae:	bf00      	nop
 80051b0:	20000264 	.word	0x20000264

080051b4 <__malloc_unlock>:
 80051b4:	4801      	ldr	r0, [pc, #4]	; (80051bc <__malloc_unlock+0x8>)
 80051b6:	f7ff ba04 	b.w	80045c2 <__retarget_lock_release_recursive>
 80051ba:	bf00      	nop
 80051bc:	20000264 	.word	0x20000264

080051c0 <_free_r>:
 80051c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051c2:	2900      	cmp	r1, #0
 80051c4:	d044      	beq.n	8005250 <_free_r+0x90>
 80051c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ca:	9001      	str	r0, [sp, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f1a1 0404 	sub.w	r4, r1, #4
 80051d2:	bfb8      	it	lt
 80051d4:	18e4      	addlt	r4, r4, r3
 80051d6:	f7ff ffe7 	bl	80051a8 <__malloc_lock>
 80051da:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <_free_r+0x94>)
 80051dc:	9801      	ldr	r0, [sp, #4]
 80051de:	6813      	ldr	r3, [r2, #0]
 80051e0:	b933      	cbnz	r3, 80051f0 <_free_r+0x30>
 80051e2:	6063      	str	r3, [r4, #4]
 80051e4:	6014      	str	r4, [r2, #0]
 80051e6:	b003      	add	sp, #12
 80051e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051ec:	f7ff bfe2 	b.w	80051b4 <__malloc_unlock>
 80051f0:	42a3      	cmp	r3, r4
 80051f2:	d908      	bls.n	8005206 <_free_r+0x46>
 80051f4:	6825      	ldr	r5, [r4, #0]
 80051f6:	1961      	adds	r1, r4, r5
 80051f8:	428b      	cmp	r3, r1
 80051fa:	bf01      	itttt	eq
 80051fc:	6819      	ldreq	r1, [r3, #0]
 80051fe:	685b      	ldreq	r3, [r3, #4]
 8005200:	1949      	addeq	r1, r1, r5
 8005202:	6021      	streq	r1, [r4, #0]
 8005204:	e7ed      	b.n	80051e2 <_free_r+0x22>
 8005206:	461a      	mov	r2, r3
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	b10b      	cbz	r3, 8005210 <_free_r+0x50>
 800520c:	42a3      	cmp	r3, r4
 800520e:	d9fa      	bls.n	8005206 <_free_r+0x46>
 8005210:	6811      	ldr	r1, [r2, #0]
 8005212:	1855      	adds	r5, r2, r1
 8005214:	42a5      	cmp	r5, r4
 8005216:	d10b      	bne.n	8005230 <_free_r+0x70>
 8005218:	6824      	ldr	r4, [r4, #0]
 800521a:	4421      	add	r1, r4
 800521c:	1854      	adds	r4, r2, r1
 800521e:	42a3      	cmp	r3, r4
 8005220:	6011      	str	r1, [r2, #0]
 8005222:	d1e0      	bne.n	80051e6 <_free_r+0x26>
 8005224:	681c      	ldr	r4, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	6053      	str	r3, [r2, #4]
 800522a:	4421      	add	r1, r4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	e7da      	b.n	80051e6 <_free_r+0x26>
 8005230:	d902      	bls.n	8005238 <_free_r+0x78>
 8005232:	230c      	movs	r3, #12
 8005234:	6003      	str	r3, [r0, #0]
 8005236:	e7d6      	b.n	80051e6 <_free_r+0x26>
 8005238:	6825      	ldr	r5, [r4, #0]
 800523a:	1961      	adds	r1, r4, r5
 800523c:	428b      	cmp	r3, r1
 800523e:	bf04      	itt	eq
 8005240:	6819      	ldreq	r1, [r3, #0]
 8005242:	685b      	ldreq	r3, [r3, #4]
 8005244:	6063      	str	r3, [r4, #4]
 8005246:	bf04      	itt	eq
 8005248:	1949      	addeq	r1, r1, r5
 800524a:	6021      	streq	r1, [r4, #0]
 800524c:	6054      	str	r4, [r2, #4]
 800524e:	e7ca      	b.n	80051e6 <_free_r+0x26>
 8005250:	b003      	add	sp, #12
 8005252:	bd30      	pop	{r4, r5, pc}
 8005254:	20000268 	.word	0x20000268

08005258 <_read_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d07      	ldr	r5, [pc, #28]	; (8005278 <_read_r+0x20>)
 800525c:	4604      	mov	r4, r0
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	2200      	movs	r2, #0
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f7fc f98f 	bl	800158a <_read>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_read_r+0x1e>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	b103      	cbz	r3, 8005276 <_read_r+0x1e>
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	20000270 	.word	0x20000270

0800527c <_fstat_r>:
 800527c:	b538      	push	{r3, r4, r5, lr}
 800527e:	4d07      	ldr	r5, [pc, #28]	; (800529c <_fstat_r+0x20>)
 8005280:	2300      	movs	r3, #0
 8005282:	4604      	mov	r4, r0
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	602b      	str	r3, [r5, #0]
 800528a:	f7fc f9c3 	bl	8001614 <_fstat>
 800528e:	1c43      	adds	r3, r0, #1
 8005290:	d102      	bne.n	8005298 <_fstat_r+0x1c>
 8005292:	682b      	ldr	r3, [r5, #0]
 8005294:	b103      	cbz	r3, 8005298 <_fstat_r+0x1c>
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	bd38      	pop	{r3, r4, r5, pc}
 800529a:	bf00      	nop
 800529c:	20000270 	.word	0x20000270

080052a0 <_isatty_r>:
 80052a0:	b538      	push	{r3, r4, r5, lr}
 80052a2:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_isatty_r+0x1c>)
 80052a4:	2300      	movs	r3, #0
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	602b      	str	r3, [r5, #0]
 80052ac:	f7fc f9c2 	bl	8001634 <_isatty>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_isatty_r+0x1a>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_isatty_r+0x1a>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	20000270 	.word	0x20000270

080052c0 <_init>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr

080052cc <_fini>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	bf00      	nop
 80052d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d2:	bc08      	pop	{r3}
 80052d4:	469e      	mov	lr, r3
 80052d6:	4770      	bx	lr
